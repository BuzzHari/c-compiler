/* The following code was generated by JFlex 1.7.0 */

import java.util.*;
import java.io.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Scanner.l</tt>
 */
class Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\6\1\5\1\11\1\11\1\10\22\0\1\4\1\53\1\13"+
    "\1\62\1\0\1\57\1\55\1\7\1\63\1\64\1\47\1\56\1\60"+
    "\1\44\1\45\1\46\12\2\1\0\1\61\1\50\1\51\1\52\1\0"+
    "\1\12\32\1\1\67\1\71\1\70\1\0\1\3\1\0\1\14\1\20"+
    "\1\24\1\31\1\22\1\32\1\36\1\26\1\30\1\1\1\23\1\33"+
    "\1\34\1\27\1\17\1\42\1\1\1\21\1\25\1\16\1\15\1\43"+
    "\1\40\1\35\1\41\1\37\1\65\1\54\1\66\7\0\1\11\u1fa2\0"+
    "\1\11\1\11\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\0\1\2\1\3\1\4\1\1\1\5\1\1"+
    "\1\2\1\6\21\3\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\3\2\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\0"+
    "\1\2\3\0\21\3\1\32\1\33\11\3\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\0\1\2\1\51\1\52\1\0"+
    "\1\53\1\54\24\3\1\55\2\3\1\56\10\3\3\0"+
    "\1\57\1\60\6\3\1\61\1\62\1\3\1\63\2\3"+
    "\1\64\12\3\1\65\1\3\1\66\2\3\1\67\1\3"+
    "\1\34\2\0\1\3\1\70\1\3\1\71\4\3\1\72"+
    "\2\3\1\73\1\74\5\3\1\75\1\0\1\76\2\3"+
    "\1\0\1\77\2\3\1\100\1\3\1\101\1\3\1\102"+
    "\1\103\1\104\1\105\1\106\1\107\1\3\1\110\1\111"+
    "\1\3\1\0\1\3\1\112\2\3\1\113\1\3\1\0"+
    "\1\114\1\115\1\116\1\117\12\0\1\120";

  private static int [] zzUnpackAction() {
    int [] result = new int[236];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\164\0\u015c"+
    "\0\u0196\0\164\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2"+
    "\0\u032c\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2"+
    "\0\u04fc\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658\0\u0692"+
    "\0\u06cc\0\u0706\0\u0740\0\u077a\0\u07b4\0\u07ee\0\164\0\164"+
    "\0\u0828\0\164\0\164\0\164\0\u0862\0\u089c\0\164\0\164"+
    "\0\u08d6\0\u0910\0\u094a\0\u0984\0\u0862\0\u09be\0\u09f8\0\u0a32"+
    "\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02"+
    "\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea\0\u0d24\0\u0d5e\0\u0d98\0\256"+
    "\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba\0\u0ef4\0\u0f2e\0\u0f68"+
    "\0\u0fa2\0\u0fdc\0\u1016\0\164\0\164\0\164\0\164\0\164"+
    "\0\164\0\164\0\164\0\164\0\164\0\164\0\164\0\u1050"+
    "\0\u108a\0\164\0\164\0\u10c4\0\u10fe\0\164\0\u1138\0\u1172"+
    "\0\u11ac\0\u11e6\0\u1220\0\u125a\0\u1294\0\u12ce\0\u1308\0\u1342"+
    "\0\u137c\0\u13b6\0\u13f0\0\u142a\0\u1464\0\u149e\0\u14d8\0\u1512"+
    "\0\u154c\0\u1586\0\256\0\u15c0\0\u15fa\0\256\0\u1634\0\u166e"+
    "\0\u16a8\0\u16e2\0\u171c\0\u1756\0\u1790\0\u17ca\0\u1804\0\u183e"+
    "\0\u1878\0\u18b2\0\256\0\u18ec\0\u1926\0\u1960\0\u199a\0\u19d4"+
    "\0\u1a0e\0\256\0\256\0\u1a48\0\256\0\u1a82\0\u1abc\0\256"+
    "\0\u1af6\0\u1b30\0\u1b6a\0\u1ba4\0\u1bde\0\u1c18\0\u1c52\0\u1c8c"+
    "\0\u1cc6\0\u1d00\0\256\0\u1d3a\0\256\0\u1d74\0\u1dae\0\256"+
    "\0\u1de8\0\u1804\0\u1e22\0\u1e5c\0\u1e96\0\256\0\u1ed0\0\256"+
    "\0\u1f0a\0\u1f44\0\u1f7e\0\u1fb8\0\256\0\u1ff2\0\u202c\0\256"+
    "\0\256\0\u2066\0\u20a0\0\u20da\0\u2114\0\u214e\0\256\0\u2188"+
    "\0\256\0\u21c2\0\u21fc\0\u2236\0\164\0\u2270\0\u22aa\0\256"+
    "\0\u22e4\0\256\0\u231e\0\256\0\256\0\256\0\256\0\256"+
    "\0\256\0\u2358\0\164\0\256\0\u2392\0\u23cc\0\u2406\0\256"+
    "\0\u2440\0\u247a\0\256\0\u24b4\0\u24ee\0\256\0\256\0\256"+
    "\0\256\0\u2528\0\u2562\0\u259c\0\u25d6\0\u2610\0\u264a\0\u2684"+
    "\0\u26be\0\u26f8\0\u2732\0\164";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[236];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\3\1\6\1\7\1\10\1\11"+
    "\3\3\1\12\1\13\1\14\1\15\1\4\1\16\1\17"+
    "\1\20\1\4\1\21\1\22\2\4\1\23\1\24\1\25"+
    "\1\26\1\27\1\4\1\30\1\4\1\31\1\4\1\32"+
    "\1\33\1\34\1\3\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\3\3\5\56\1\57\2\56"+
    "\1\0\2\56\1\60\55\56\1\61\73\0\3\4\10\0"+
    "\30\4\23\0\1\62\3\0\1\63\1\5\1\63\6\0"+
    "\1\63\1\0\30\63\1\0\1\64\20\0\1\65\7\0"+
    "\1\6\73\0\1\10\63\0\5\66\1\0\2\66\2\0"+
    "\60\66\1\0\3\4\10\0\1\4\1\67\26\4\23\0"+
    "\1\62\3\0\3\4\10\0\13\4\1\70\14\4\23\0"+
    "\1\62\3\0\3\4\10\0\25\4\1\71\2\4\23\0"+
    "\1\62\3\0\3\4\10\0\5\4\1\72\22\4\23\0"+
    "\1\62\3\0\3\4\10\0\6\4\1\73\21\4\23\0"+
    "\1\62\3\0\3\4\10\0\13\4\1\74\3\4\1\75"+
    "\1\4\1\76\6\4\23\0\1\62\3\0\3\4\10\0"+
    "\1\77\2\4\1\100\6\4\1\101\15\4\23\0\1\62"+
    "\3\0\3\4\10\0\2\4\1\102\5\4\1\103\1\4"+
    "\1\104\1\4\1\105\7\4\1\106\3\4\23\0\1\62"+
    "\3\0\3\4\10\0\13\4\1\107\2\4\1\110\11\4"+
    "\23\0\1\62\3\0\3\4\10\0\3\4\1\111\2\4"+
    "\1\112\21\4\23\0\1\62\3\0\3\4\10\0\3\4"+
    "\1\113\13\4\1\114\10\4\23\0\1\62\3\0\3\4"+
    "\10\0\3\4\1\115\24\4\23\0\1\62\3\0\3\4"+
    "\10\0\1\116\27\4\23\0\1\62\3\0\3\4\10\0"+
    "\3\4\1\117\24\4\23\0\1\62\3\0\3\4\10\0"+
    "\12\4\1\120\15\4\23\0\1\62\3\0\3\4\10\0"+
    "\5\4\1\121\22\4\23\0\1\62\3\0\3\4\10\0"+
    "\3\4\1\122\24\4\23\0\1\62\4\0\1\123\41\0"+
    "\1\124\73\0\1\125\1\126\70\0\1\127\74\0\1\130"+
    "\71\0\1\131\71\0\1\132\71\0\1\133\74\0\1\134"+
    "\72\0\1\135\16\0\1\123\53\0\1\136\30\0\1\137"+
    "\7\0\1\137\3\0\2\137\67\0\1\140\53\0\1\141"+
    "\57\0\5\56\1\0\2\56\1\0\2\56\1\0\55\56"+
    "\14\0\1\142\5\0\1\143\52\0\1\62\65\0\1\144"+
    "\2\0\3\63\6\0\1\63\1\0\30\63\30\0\1\145"+
    "\76\0\1\146\63\0\3\4\10\0\2\4\1\147\25\4"+
    "\23\0\1\62\3\0\3\4\10\0\11\4\1\150\2\4"+
    "\1\151\13\4\23\0\1\62\3\0\3\4\10\0\26\4"+
    "\1\152\1\4\23\0\1\62\3\0\3\4\10\0\6\4"+
    "\1\153\21\4\23\0\1\62\3\0\3\4\10\0\2\4"+
    "\1\154\17\4\1\155\5\4\23\0\1\62\3\0\3\4"+
    "\10\0\1\4\1\156\26\4\23\0\1\62\3\0\3\4"+
    "\10\0\11\4\1\157\16\4\23\0\1\62\3\0\3\4"+
    "\10\0\2\4\1\160\25\4\23\0\1\62\3\0\3\4"+
    "\10\0\11\4\1\161\16\4\23\0\1\62\3\0\3\4"+
    "\10\0\13\4\1\162\14\4\23\0\1\62\3\0\3\4"+
    "\10\0\1\163\27\4\23\0\1\62\3\0\3\4\10\0"+
    "\1\164\4\4\1\165\22\4\23\0\1\62\3\0\3\4"+
    "\10\0\1\166\27\4\23\0\1\62\3\0\3\4\10\0"+
    "\3\4\1\167\24\4\23\0\1\62\3\0\3\4\10\0"+
    "\22\4\1\170\1\171\4\4\23\0\1\62\3\0\3\4"+
    "\10\0\14\4\1\172\13\4\23\0\1\62\3\0\3\4"+
    "\10\0\2\4\1\173\25\4\23\0\1\62\3\0\3\4"+
    "\10\0\1\4\1\174\26\4\23\0\1\62\3\0\3\4"+
    "\10\0\16\4\1\175\11\4\23\0\1\62\3\0\3\4"+
    "\10\0\5\4\1\176\22\4\23\0\1\62\3\0\3\4"+
    "\10\0\3\4\1\177\24\4\23\0\1\62\3\0\3\4"+
    "\10\0\13\4\1\200\14\4\23\0\1\62\3\0\3\4"+
    "\10\0\14\4\1\201\13\4\23\0\1\62\3\0\3\4"+
    "\10\0\2\4\1\202\25\4\23\0\1\62\3\0\3\4"+
    "\10\0\14\4\1\203\13\4\23\0\1\62\3\0\3\4"+
    "\10\0\14\4\1\204\13\4\23\0\1\62\3\0\3\4"+
    "\10\0\14\4\1\205\2\4\1\206\10\4\23\0\1\62"+
    "\4\0\1\123\42\0\1\207\53\0\1\210\43\0\1\63"+
    "\1\141\1\63\6\0\1\63\1\0\30\63\22\0\1\65"+
    "\4\0\1\211\12\0\30\211\30\0\1\145\42\0\1\212"+
    "\25\0\3\4\10\0\3\4\1\213\24\4\23\0\1\62"+
    "\3\0\3\4\10\0\14\4\1\214\13\4\23\0\1\62"+
    "\3\0\3\4\10\0\3\4\1\215\24\4\23\0\1\62"+
    "\3\0\3\4\10\0\6\4\1\216\21\4\23\0\1\62"+
    "\3\0\3\4\10\0\1\217\27\4\23\0\1\62\3\0"+
    "\3\4\10\0\1\4\1\220\26\4\23\0\1\62\3\0"+
    "\3\4\10\0\14\4\1\221\13\4\23\0\1\62\3\0"+
    "\3\4\10\0\20\4\1\222\7\4\23\0\1\62\3\0"+
    "\3\4\10\0\6\4\1\223\21\4\23\0\1\62\3\0"+
    "\3\4\10\0\6\4\1\224\21\4\23\0\1\62\3\0"+
    "\3\4\10\0\6\4\1\225\21\4\23\0\1\62\3\0"+
    "\3\4\10\0\2\4\1\226\6\4\1\227\16\4\23\0"+
    "\1\62\3\0\3\4\10\0\5\4\1\230\22\4\23\0"+
    "\1\62\3\0\3\4\10\0\2\4\1\231\25\4\23\0"+
    "\1\62\3\0\3\4\10\0\1\4\1\232\26\4\23\0"+
    "\1\62\3\0\3\4\10\0\13\4\1\233\14\4\23\0"+
    "\1\62\3\0\3\4\10\0\5\4\1\234\22\4\23\0"+
    "\1\62\3\0\3\4\10\0\13\4\1\235\14\4\23\0"+
    "\1\62\3\0\3\4\10\0\6\4\1\236\21\4\23\0"+
    "\1\62\3\0\3\4\10\0\2\4\1\237\25\4\23\0"+
    "\1\62\3\0\3\4\10\0\4\4\1\240\23\4\23\0"+
    "\1\62\3\0\3\4\10\0\1\241\27\4\23\0\1\62"+
    "\3\0\3\4\10\0\1\242\27\4\23\0\1\62\3\0"+
    "\3\4\10\0\22\4\1\243\5\4\23\0\1\62\3\0"+
    "\3\4\10\0\13\4\1\244\14\4\23\0\1\62\3\0"+
    "\3\4\10\0\3\4\1\245\24\4\23\0\1\62\3\0"+
    "\3\4\10\0\17\4\1\246\10\4\23\0\1\62\3\0"+
    "\3\4\10\0\13\4\1\247\14\4\23\0\1\62\3\0"+
    "\3\4\10\0\15\4\1\250\12\4\23\0\1\62\3\0"+
    "\3\4\10\0\1\251\27\4\23\0\1\62\4\0\1\252"+
    "\113\0\1\253\46\0\3\211\10\0\30\211\17\0\1\254"+
    "\10\0\1\212\42\0\1\212\25\0\3\4\10\0\22\4"+
    "\1\255\5\4\23\0\1\62\3\0\3\4\10\0\13\4"+
    "\1\256\14\4\23\0\1\62\3\0\3\4\10\0\15\4"+
    "\1\257\12\4\23\0\1\62\3\0\3\4\10\0\7\4"+
    "\1\260\20\4\23\0\1\62\3\0\3\4\10\0\5\4"+
    "\1\261\22\4\23\0\1\62\3\0\3\4\10\0\11\4"+
    "\1\262\16\4\23\0\1\62\3\0\3\4\10\0\5\4"+
    "\1\263\22\4\23\0\1\62\3\0\3\4\10\0\14\4"+
    "\1\264\13\4\23\0\1\62\3\0\3\4\10\0\2\4"+
    "\1\265\25\4\23\0\1\62\3\0\3\4\10\0\14\4"+
    "\1\266\13\4\23\0\1\62\3\0\3\4\10\0\10\4"+
    "\1\267\17\4\23\0\1\62\3\0\3\4\10\0\16\4"+
    "\1\270\11\4\23\0\1\62\3\0\3\4\10\0\2\4"+
    "\1\271\25\4\23\0\1\62\3\0\3\4\10\0\6\4"+
    "\1\272\21\4\23\0\1\62\3\0\3\4\10\0\3\4"+
    "\1\273\24\4\23\0\1\62\3\0\3\4\10\0\10\4"+
    "\1\274\17\4\23\0\1\62\3\0\3\4\10\0\17\4"+
    "\1\275\10\4\23\0\1\62\3\0\3\4\10\0\1\4"+
    "\1\276\26\4\23\0\1\62\3\0\3\4\10\0\2\4"+
    "\1\277\25\4\23\0\1\62\3\0\3\4\10\0\30\4"+
    "\17\0\1\300\3\0\1\62\3\0\3\4\10\0\6\4"+
    "\1\301\21\4\23\0\1\62\3\0\3\4\10\0\2\4"+
    "\1\302\25\4\23\0\1\62\3\0\3\4\10\0\2\4"+
    "\1\303\25\4\23\0\1\62\35\0\1\304\37\0\4\254"+
    "\7\0\30\254\20\0\1\305\6\0\3\4\10\0\13\4"+
    "\1\306\14\4\23\0\1\62\3\0\3\4\10\0\6\4"+
    "\1\307\21\4\23\0\1\62\3\0\3\4\10\0\13\4"+
    "\1\310\14\4\23\0\1\62\3\0\3\4\10\0\2\4"+
    "\1\311\25\4\23\0\1\62\3\0\3\4\10\0\13\4"+
    "\1\312\14\4\23\0\1\62\3\0\3\4\10\0\13\4"+
    "\1\313\14\4\23\0\1\62\3\0\3\4\10\0\10\4"+
    "\1\314\17\4\23\0\1\62\3\0\3\4\10\0\2\4"+
    "\1\315\25\4\23\0\1\62\3\0\3\4\10\0\15\4"+
    "\1\316\12\4\23\0\1\62\3\0\3\4\10\0\16\4"+
    "\1\317\11\4\23\0\1\62\3\0\3\4\10\0\12\4"+
    "\1\320\15\4\23\0\1\62\3\0\3\4\10\0\6\4"+
    "\1\321\21\4\23\0\1\62\3\0\3\4\10\0\17\4"+
    "\1\322\10\4\23\0\1\62\66\0\1\323\6\0\3\4"+
    "\10\0\16\4\1\324\11\4\23\0\1\62\3\0\3\4"+
    "\10\0\14\4\1\325\13\4\23\0\1\62\17\0\1\326"+
    "\55\0\3\4\10\0\6\4\1\327\21\4\23\0\1\62"+
    "\3\0\3\4\10\0\16\4\1\330\11\4\23\0\1\62"+
    "\3\0\3\4\10\0\6\4\1\331\21\4\23\0\1\62"+
    "\3\0\3\4\10\0\1\4\1\332\26\4\23\0\1\62"+
    "\3\0\3\4\10\0\2\4\1\333\25\4\23\0\1\62"+
    "\3\0\3\4\10\0\17\4\1\334\10\4\23\0\1\62"+
    "\33\0\1\335\41\0\3\4\10\0\15\4\1\336\12\4"+
    "\23\0\1\62\3\0\3\4\10\0\5\4\1\337\22\4"+
    "\23\0\1\62\3\0\3\4\10\0\6\4\1\340\21\4"+
    "\23\0\1\62\3\0\3\4\10\0\6\4\1\341\21\4"+
    "\23\0\1\62\24\0\1\342\53\0\1\343\135\0\1\344"+
    "\46\0\1\345\62\0\1\346\104\0\1\347\70\0\1\350"+
    "\60\0\1\351\117\0\1\352\52\0\1\353\115\0\1\354"+
    "\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10092];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\0\1\11\3\1\1\11\2\1\1\11\34\1"+
    "\2\11\1\1\3\11\2\1\2\11\1\1\1\0\1\1"+
    "\3\0\35\1\14\11\1\0\1\1\2\11\1\0\1\1"+
    "\1\11\40\1\3\0\41\1\2\0\23\1\1\0\3\1"+
    "\1\0\1\11\15\1\1\11\2\1\1\0\6\1\1\0"+
    "\4\1\12\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[236];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  
  public static final int AUTO = 1;
  public static final int BREAK = 2;
  public static final int CASE = 3;
  public static final int CHAR = 4;
  public static final int CONST = 5;
  public static final int CONTINUE = 6;
  public static final int DEFAULT =  7;
  public static final int DO =  8;
  public static final int DOUBLE = 9;
  public static final int ELSE  = 10;
  public static final int ENUM =  11;
  public static final int EXTERN = 12;
  public static final int FLOAT = 13;
  public static final int FOR = 14;
  public static final int GOTO = 15;
  public static final int IF = 16;
  public static final int INT = 17;
  public static final int LONG = 18;
  public static final int REGISTER = 19;
  public static final int RETURN = 20;
  public static final int SHORT  = 21;
  public static final int SIGNED  = 22;
  public static final int SIZEOF  = 23;
  public static final int STATIC = 24;
  public static final int STRUCT = 25;
  public static final int SWITCH  = 26;
  public static final int TYPEDEF = 27;
  public static final int UNION  = 28;  
  public static final int UNSIGNED =  29;
  public static final int VOID  = 30;
  public static final int VOLATILE = 31;
  public static final int WHILE =  32;

  public static final int IDENTIFIER =  33;
  public static final int SLC  = 34;
  public static final int MLCS = 35;
  public static final int MLCE = 36;

  public static final int LEQ = 37;
  public static final int GEQ = 38;
  public static final int EQEQ =  39;
  public static final int NEQ = 40;
  public static final int LOR = 41;
  public static final int LAND = 42;
  public static final int ASSIGN = 43;
  public static final int PLUS = 44;
  public static final int SUB =  45;
  public static final int MULT = 46;
  public static final int DIV = 47;
  public static final int MOD = 48;
  public static final int LESSER = 49;
  public static final int GREATER = 50;
  public static final int INCR = 51;
  public static final int DECR = 52;

  public static final int COMMA = 53;
  public static final int SEMI  = 54;

  public static final int HEADER = 55;
  public static final int MAIN  = 56;

  public static final int PRINTF = 57;
  public static final int SCANF  = 58;
  public static final int DEFINE = 59;

  public static final int INT_CONST = 60;
  public static final int FLOAT_CONST = 61;

  public static final int TYPE_SPEC = 62;

  public static final int DQ = 63;

  public static final int OBO = 64;
  public static final int OBC = 65;
  public static final int CBO = 66;
  public static final int CBC = 67;
  public static final int HASH = 68;

  public static final int ARR = 69;
  public static final int FUNC =70;

  public static final int NUM_ERR = 71;
  public static final int UNKNOWN = 72;

  public static final int CHAR_CONST  = 73;
  public static final int SIGNED_CONST = 74;
  public static final int STRING_CONST = 75;

  public static int lineno = 1;
  public static StringBuffer string = new StringBuffer();

  static class Node {
      public int lineno;
      public String token;
      public String type;

      Node(int lineno, String type, String token) {
        this.lineno = lineno;
        this.type = type;
        this.token = token;
      }

  }

  public static boolean present(String type, String token) {
    for (int i = 0; i < count; i++)
      if(symbolTable[i].type.equals(type) && symbolTable[i].token.equals(token))
        return true;
      return false;
  }

  public static void insertToken(int lineno, String type, String token) {
    if( !present(type, token) ) {
      symbolTable[count++] = new Node(lineno, type, token);
    } 
  }

  public static void display() {
    for( int i = 0; i < count; i++ ){
      System.out.println(" line: " + symbolTable[i].lineno + "\ttype: " + symbolTable[i].type + "\ttoken: " + symbolTable[i].token );
    }
  }
  
  static Node[] symbolTable = new Node[1024];
  static int count = 0;

  
  public static void main(String[] args) throws IOException 
  {
      //InputStream stream = new FileInputStream(args[0]);
      InputStreamReader reader = new InputStreamReader(System.in);
      Scanner lexer = new Scanner(reader);

      int scan, slcline = 0, mlc = 0, mlcline = 0, dq = 0, dqline = 0; 
      
      System.out.println(" Scanning the file\n");
      scan = lexer.yylex();
      while(scan != YYEOF) {

        if( lineno == slcline ) {
          scan = lexer.yylex();
          continue;
        }
        if( lineno != dqline && dqline != 0 ) {
          if( dq % 2 != 0)
            System.out.println("\n******** ERROR!! INCOMPLETE STRING at Line "+dqline+" ********\n\n");
          dq=0;
        }

        if(( scan >= 1 && scan <= 32) && mlc == 0) {
            System.out.println(lexer.yytext() + "\t\t\tKEYWORD\t\t\t\tLine " + lineno);
            insertToken(lexer.yyline,"KEYWORD", lexer.yytext());
        }
        if( scan == 33 && mlc == 0) {
            System.out.println(lexer.yytext() + "\t\t\tIDENTIFIER\t\t\tLine " + lineno);
            insertToken(lexer.yyline,"IDENTIFIER", lexer.yytext());
        }
        if( scan == 34 ) {
            System.out.println(lexer.yytext() + "\t\t\tSingleLine Comment\t\tLine " + lineno);
            slcline = lineno;
        }
        if( scan == 35 && mlc == 0) {
            System.out.println(lexer.yytext() + "\t\t\tMultiLine Comment Start\t\tLine " + lineno);
            mlcline = lineno;
            mlc = 1;
        }
        if( scan == 36 && mlc == 0) {
            System.out.println("\n******** ERROR!! UNMATCHED MULTILINE COMMENT " + lexer.yytext() +" at Line "+lineno+" *******\n");
        }
        if( scan == 36 && mlc == 1) {
          mlc = 0;
          System.out.println(lexer.yytext() + "\t\t\tMultiLine Comment End\t\tLine " + lineno);
        }
        if( (scan >= 37 && scan<= 52) && mlc == 0){
            System.out.println(lexer.yytext() + "\t\t\tOPERATOR\t\t\tLine " + lineno);
            insertToken(lexer.yyline, "OPERATOR", lexer.yytext());
        }
        if((scan == 53 || scan == 54 || scan == 63 || (scan>=64 && scan<=68)) && mlc == 0) {
            System.out.println(lexer.yytext() + "\t\t\tSPECIAL SYMBOL\t\t\tLine " + lineno);
            if( scan == 63 ) {
              dq++;
              dqline = lineno;
            }
            insertToken(lexer.yyline, "SPECIAL SYMBOL", lexer.yytext());
        }
        if( scan == 55 && mlc == 0) {
          System.out.println(lexer.yytext() + "\tHEADER\t\t\t\tLine " + lineno);
        }
        if( scan == 56 && mlc == 0) {
          System.out.println(lexer.yytext() + "\t\t\tMAIN FUNCTION\t\t\tLine " + lineno);
          insertToken(lexer.yyline, "IDENTIFIER", lexer.yytext());
        }
        if((scan == 57 || scan == 58) && mlc == 0) {
          System.out.println(lexer.yytext() + "\t\t\tPRE DEFINED FUNCTION\t\tLine " + lineno);
          insertToken(lexer.yyline, "PRE DEFINED FUNCTION", lexer.yytext());
        }
        if( scan == 59 && mlc == 0 ) {
          System.out.println(lexer.yytext() + "\t\t\tPRE PROCESSOR DIRECTIVE\t\tLine " + lineno);
        }
        if( scan == 60 && mlc == 0) {
          System.out.println(lexer.yytext() + "\t\t\tINTEGER CONSTANT\t\tLine " + lineno);
          insertToken(lexer.yyline, "INTGER CONSTANT", lexer.yytext());
        }
        if( scan == 61 && mlc == 0) {
          System.out.println(lexer.yytext() + "\t\t\tFLOATING POINT CONSTANT\t\tLine " + lineno);
          insertToken(lexer.yyline, "FLOATING POINT CONSTANT", lexer.yytext());
        }
        if( scan == 62 && mlc == 0) {
          System.out.println(lexer.yytext() + "\t\t\tTYPE SPECIFIER\t\t\t\tLine " + lineno);
        }
        if( scan == 69 && mlc == 0 ) {
          System.out.println(lexer.yytext() + "\t\t\tARRAY\t\t\t\tLine " + lineno);
          insertToken(lexer.yyline, "ARRAY", lexer.yytext());
        }
        if( scan == 70 && mlc == 0) {
          System.out.println(lexer.yytext() + "\t\t\tUSER DEFINED FUNCTION\t\tLine " + lineno);
          insertToken(lexer.yyline, "USER DEFINED FUNCTION", lexer.yytext());
        }
        if( scan == 71 && mlc == 0) {
          System.out.println("\n******** ERROR!! CONSTANT ERROR " + lexer.yytext() +" at Line "+lineno+" *******\n");
        }
        if( scan == 72 && mlc == 0) {
          System.out.println("\n******** ERROR!! UNKNOWN TOKEN " + lexer.yytext() +" at Line "+lineno+" ********\n");
        }
        if( scan == 73 && mlc == 0) {
          System.out.println(lexer.yytext() + "\t\t\tCHARACTER CONSTANT\t\t\tLine " + lineno);
          insertToken(lexer.yyline, "CHARACTER CONSTANT", lexer.yytext());
        }
        if( scan == 74 && mlc == 0) {
          System.out.println(lexer.yytext() + "\t\t\tSIGNED CONSTANT\t\t\tLine " + lineno);
          insertToken(lexer.yyline, "SIGNED CONSTANT", lexer.yytext());
        }
        if( scan == 75 && mlc == 0 ) {
          System.out.println(lexer.yytext() + "\t\t\tSTRING CONSTANT\t\t\tLine " + lineno);
          insertToken(lexer.yyline, "STRING CONSTANT", lexer.yytext());
        }

        scan = lexer.yylex();
      }
      if(mlc == 1)
        System.out.println("\n******** ERROR!! UNMATCHED MULTILINE COMMENT " + lexer.yytext() +" at Line "+lineno+" *******\n");

      System.out.println("\n\t******** SYMBOL TABLE ********\t\t\n");
      display();

    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 178) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /* Ignore */
            } 
            // fall through
          case 81: break;
          case 2: 
            { return UNKNOWN;
            } 
            // fall through
          case 82: break;
          case 3: 
            { return IDENTIFIER;
            } 
            // fall through
          case 83: break;
          case 4: 
            { return INT_CONST;
            } 
            // fall through
          case 84: break;
          case 5: 
            { lineno++;
            } 
            // fall through
          case 85: break;
          case 6: 
            { string.setLength(0); yybegin(STRING);
            } 
            // fall through
          case 86: break;
          case 7: 
            { return SUB;
            } 
            // fall through
          case 87: break;
          case 8: 
            { return DIV;
            } 
            // fall through
          case 88: break;
          case 9: 
            { return MULT;
            } 
            // fall through
          case 89: break;
          case 10: 
            { return LESSER;
            } 
            // fall through
          case 90: break;
          case 11: 
            { return ASSIGN;
            } 
            // fall through
          case 91: break;
          case 12: 
            { return GREATER;
            } 
            // fall through
          case 92: break;
          case 13: 
            { return PLUS;
            } 
            // fall through
          case 93: break;
          case 14: 
            { return MOD;
            } 
            // fall through
          case 94: break;
          case 15: 
            { return COMMA;
            } 
            // fall through
          case 95: break;
          case 16: 
            { return SEMI;
            } 
            // fall through
          case 96: break;
          case 17: 
            { return HASH;
            } 
            // fall through
          case 97: break;
          case 18: 
            { return OBO;
            } 
            // fall through
          case 98: break;
          case 19: 
            { return OBC;
            } 
            // fall through
          case 99: break;
          case 20: 
            { return CBO;
            } 
            // fall through
          case 100: break;
          case 21: 
            { return CBC;
            } 
            // fall through
          case 101: break;
          case 22: 
            { string.append( yytext());
            } 
            // fall through
          case 102: break;
          case 23: 
            { string.append('\n');
            } 
            // fall through
          case 103: break;
          case 24: 
            { yybegin(YYINITIAL);
                  return STRING_CONST;
            } 
            // fall through
          case 104: break;
          case 25: 
            { string.append('\\');
            } 
            // fall through
          case 105: break;
          case 26: 
            { return IF;
            } 
            // fall through
          case 106: break;
          case 27: 
            { return DO;
            } 
            // fall through
          case 107: break;
          case 28: 
            { return SIGNED_CONST;
            } 
            // fall through
          case 108: break;
          case 29: 
            { return DECR;
            } 
            // fall through
          case 109: break;
          case 30: 
            { return SLC;
            } 
            // fall through
          case 110: break;
          case 31: 
            { return MLCS;
            } 
            // fall through
          case 111: break;
          case 32: 
            { return MLCE;
            } 
            // fall through
          case 112: break;
          case 33: 
            { return LEQ;
            } 
            // fall through
          case 113: break;
          case 34: 
            { return EQEQ;
            } 
            // fall through
          case 114: break;
          case 35: 
            { return GEQ;
            } 
            // fall through
          case 115: break;
          case 36: 
            { return NEQ;
            } 
            // fall through
          case 116: break;
          case 37: 
            { return LOR;
            } 
            // fall through
          case 117: break;
          case 38: 
            { return LAND;
            } 
            // fall through
          case 118: break;
          case 39: 
            { return INCR;
            } 
            // fall through
          case 119: break;
          case 40: 
            { return TYPE_SPEC;
            } 
            // fall through
          case 120: break;
          case 41: 
            { string.append('\"');
            } 
            // fall through
          case 121: break;
          case 42: 
            { string.append('\r');
            } 
            // fall through
          case 122: break;
          case 43: 
            { return FLOAT_CONST;
            } 
            // fall through
          case 123: break;
          case 44: 
            { return CHAR_CONST;
            } 
            // fall through
          case 124: break;
          case 45: 
            { return INT;
            } 
            // fall through
          case 125: break;
          case 46: 
            { return FOR;
            } 
            // fall through
          case 126: break;
          case 47: 
            { return NUM_ERR;
            } 
            // fall through
          case 127: break;
          case 48: 
            { return AUTO;
            } 
            // fall through
          case 128: break;
          case 49: 
            { return ENUM;
            } 
            // fall through
          case 129: break;
          case 50: 
            { return ELSE;
            } 
            // fall through
          case 130: break;
          case 51: 
            { return CASE;
            } 
            // fall through
          case 131: break;
          case 52: 
            { return CHAR;
            } 
            // fall through
          case 132: break;
          case 53: 
            { return LONG;
            } 
            // fall through
          case 133: break;
          case 54: 
            { return GOTO;
            } 
            // fall through
          case 134: break;
          case 55: 
            { return VOID;
            } 
            // fall through
          case 135: break;
          case 56: 
            { return UNION;
            } 
            // fall through
          case 136: break;
          case 57: 
            { return BREAK;
            } 
            // fall through
          case 137: break;
          case 58: 
            { return CONST;
            } 
            // fall through
          case 138: break;
          case 59: 
            { return SCANF;
            } 
            // fall through
          case 139: break;
          case 60: 
            { return SHORT;
            } 
            // fall through
          case 140: break;
          case 61: 
            { return FLOAT;
            } 
            // fall through
          case 141: break;
          case 62: 
            { return WHILE;
            } 
            // fall through
          case 142: break;
          case 63: 
            { return FUNC;
            } 
            // fall through
          case 143: break;
          case 64: 
            { return RETURN;
            } 
            // fall through
          case 144: break;
          case 65: 
            { return EXTERN;
            } 
            // fall through
          case 145: break;
          case 66: 
            { return STATIC;
            } 
            // fall through
          case 146: break;
          case 67: 
            { return STRUCT;
            } 
            // fall through
          case 147: break;
          case 68: 
            { return SIGNED;
            } 
            // fall through
          case 148: break;
          case 69: 
            { return SIZEOF;
            } 
            // fall through
          case 149: break;
          case 70: 
            { return SWITCH;
            } 
            // fall through
          case 150: break;
          case 71: 
            { return DOUBLE;
            } 
            // fall through
          case 151: break;
          case 72: 
            { return MAIN;
            } 
            // fall through
          case 152: break;
          case 73: 
            { return PRINTF;
            } 
            // fall through
          case 153: break;
          case 74: 
            { return TYPEDEF;
            } 
            // fall through
          case 154: break;
          case 75: 
            { return DEFAULT;
            } 
            // fall through
          case 155: break;
          case 76: 
            { return UNSIGNED;
            } 
            // fall through
          case 156: break;
          case 77: 
            { return REGISTER;
            } 
            // fall through
          case 157: break;
          case 78: 
            { return CONTINUE;
            } 
            // fall through
          case 158: break;
          case 79: 
            { return VOLATILE;
            } 
            // fall through
          case 159: break;
          case 80: 
            { return HEADER;
            } 
            // fall through
          case 160: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
