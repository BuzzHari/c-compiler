//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 "parser.y"
    import java.io.*;
//#line 19 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short NO_ELSE=257;
public final static short ELSE=258;
public final static short GE_OP=259;
public final static short LE_OP=260;
public final static short EQ_OP=261;
public final static short NE_OP=262;
public final static short IDENTIFIER=263;
public final static short CONSTANT=264;
public final static short STRING_LITERAL=265;
public final static short SIZEOF=266;
public final static short PTR_OP=267;
public final static short INC_OP=268;
public final static short DEC_OP=269;
public final static short LEFT_OP=270;
public final static short RIGHT_OP=271;
public final static short AND_OP=272;
public final static short OR_OP=273;
public final static short MUL_ASSIGN=274;
public final static short DIV_ASSIGN=275;
public final static short MOD_ASSIGN=276;
public final static short ADD_ASSIGN=277;
public final static short SUB_ASSIGN=278;
public final static short LEFT_ASSIGN=279;
public final static short RIGHT_ASSIGN=280;
public final static short AND_ASSIGN=281;
public final static short XOR_ASSIGN=282;
public final static short OR_ASSIGN=283;
public final static short DEFINE=284;
public final static short TYPEDEF=285;
public final static short EXTERN=286;
public final static short STATIC=287;
public final static short AUTO=288;
public final static short REGISTER=289;
public final static short CHAR=290;
public final static short SHORT=291;
public final static short INT=292;
public final static short LONG=293;
public final static short SIGNED=294;
public final static short UNSIGNED=295;
public final static short FLOAT=296;
public final static short DOUBLE=297;
public final static short CONST=298;
public final static short VOLATILE=299;
public final static short VOID=300;
public final static short STRUCT=301;
public final static short UNION=302;
public final static short ENUM=303;
public final static short CASE=304;
public final static short DEFAULT=305;
public final static short IF=306;
public final static short SWITCH=307;
public final static short WHILE=308;
public final static short DO=309;
public final static short FOR=310;
public final static short GOTO=311;
public final static short CONTINUE=312;
public final static short BREAK=313;
public final static short RETURN=314;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    0,    0,    3,    3,    3,    3,    2,    5,
    5,    5,    5,    5,    5,    5,    5,    6,    6,    8,
    8,    8,    8,    8,    8,    9,    9,    9,    9,    9,
    9,   10,   10,   12,   12,   12,   12,   13,   13,   13,
   14,   14,   14,   15,   15,   15,   15,   15,   16,   16,
   16,   17,   17,   18,   18,   19,   19,   20,   20,   21,
   21,   22,   22,    7,    7,   23,   23,   23,   23,   23,
   23,   23,   23,   23,   23,   23,    4,    4,   24,   25,
   25,   26,   26,   26,   26,   27,   27,   30,   30,   28,
   28,   28,   28,   28,   29,   29,   29,   29,   29,   29,
   29,   29,   29,   29,   34,   34,   34,   34,   33,   33,
   33,   35,   35,   36,   36,   37,   38,   38,   31,   31,
   40,   40,   40,   40,   40,   40,   40,   39,   39,   41,
   41,   43,   43,   42,   42,   11,   11,   32,   32,   32,
   44,   44,   45,   45,   45,   45,   45,   46,   46,   46,
   46,   52,   52,   51,   51,   47,   47,   48,   48,   49,
   49,   49,   50,   50,   50,   50,    1,    1,   53,   53,
   53,   53,
};
final static short yylen[] = {                            2,
    1,    2,    2,    1,    1,    1,    1,    3,    1,    1,
    4,    3,    4,    3,    3,    2,    2,    1,    3,    1,
    2,    2,    2,    2,    4,    1,    1,    1,    1,    1,
    1,    1,    4,    1,    3,    3,    3,    1,    3,    3,
    1,    3,    3,    1,    3,    3,    3,    3,    1,    3,
    3,    1,    3,    1,    3,    1,    3,    1,    3,    1,
    3,    1,    5,    1,    3,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    3,    1,    2,
    3,    1,    2,    1,    2,    1,    3,    1,    3,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    2,    1,    2,    1,    6,    5,
    3,    1,    1,    1,    2,    3,    1,    3,    2,    1,
    1,    3,    4,    3,    4,    4,    3,    1,    2,    1,
    3,    2,    1,    1,    3,    1,    2,    1,    3,    4,
    1,    3,    1,    1,    1,    1,    1,    2,    3,    3,
    4,    1,    2,    1,    2,    1,    2,    5,    7,    5,
    6,    7,    2,    2,    2,    3,    1,    1,    4,    3,
    3,    2,
};
final static short yydefred[] = {                         0,
    4,    0,  121,    9,   90,   91,   92,   93,   94,   96,
   97,   98,   99,  102,  103,  100,  101,   95,  112,  113,
    0,    0,    1,    0,  168,    0,    0,    0,    0,  104,
    0,    0,    0,  167,  129,    0,    2,    0,   80,    0,
   86,    0,   83,   85,    0,  152,    0,  172,    0,    0,
    0,    0,    0,    0,  122,    0,   81,    0,  170,    0,
   28,   29,   27,   26,    5,    6,    7,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   30,   31,  156,
  148,   10,    0,    0,   77,    0,    0,   34,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   64,  154,
  143,  144,  145,  146,  147,    0,    0,    0,  153,  171,
  111,    0,    0,    0,    0,    0,  114,  134,  127,    0,
    0,    0,  130,  124,   32,   79,    0,   87,    0,  138,
   89,  169,    0,   24,    0,   21,   22,    0,    0,    0,
  163,  164,  165,    0,    0,    0,    0,    0,  157,    0,
   16,   17,    0,    0,    0,   66,   67,   68,   69,   70,
   71,   72,   73,   74,   75,   76,    0,   23,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  149,  155,  150,
    0,    0,  107,  105,  117,    0,    0,  115,  132,  125,
    0,  126,    0,  123,  141,    0,    0,    0,    0,    0,
  166,    8,    0,  137,   78,   15,   12,    0,   18,    0,
   14,   65,   35,   36,   37,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  151,    0,    0,  116,  110,  131,  135,    0,  139,
   25,    0,    0,    0,   33,   13,    0,   11,    0,  109,
  118,  140,  142,    0,  160,    0,    0,   19,   63,    0,
  161,    0,  159,  162,
};
final static short yydgoto[] = {                         22,
   23,   24,   82,   83,   84,  218,   85,   86,   87,   88,
  146,   89,   90,   91,   92,   93,   94,   95,   96,   97,
   98,   99,  167,  127,   25,   47,   40,   27,   28,   41,
   29,  131,   30,  115,   31,  116,  117,  196,   32,   33,
  121,  122,  123,  206,  100,  101,  102,  103,  104,  105,
  106,   49,   34,
};
final static short yysindex[] = {                       170,
    0,   16,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   11,  205,    0,  170,    0,  -26, 1411, 1411, 1031,    0,
  -95,  -39,   14,    0,    0,   67,    0,  205,    0,   21,
    0,  359,    0,    0,  -33,    0,  -26,    0, 1031,   -4,
 1460,   14,  248,  476,    0,   11,    0,  580,    0, 1031,
    0,    0,    0,    0,    0,    0,    0,  794,  814,  814,
   70,   81,   83,   73,   80,  629,  145,    0,    0,    0,
    0,    0,   22,  111,    0, 1003,  822,    0,  117,   52,
 -232,  122, -145,  109,   64,   38, -105,  -31,    0,    0,
    0,    0,    0,    0,    0,   30,   19,  108,    0,    0,
    0, 1460, 1460, 1460,   11, 1373,    0,    0,    0,   11,
   33,   44,    0,    0,    0,    0,   84,    0,  580,    0,
    0,    0,  145,    0,  822,    0,    0,  822,  822,  688,
    0,    0,    0,   23,   68,  132,   11,  822,    0,  -88,
    0,    0,  770,  822,  -84,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  822,    0,  822,  822,
  822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
  822,  822,  822,  822,  822,  822,  822,    0,    0,    0,
   82, 1447,    0,    0,    0,   32,  138,    0,    0,    0,
 1411,    0,  -74,    0,    0,  -14,  160,  130,  179,  688,
    0,    0,  822,    0,    0,    0,    0,  282,    0,   -9,
    0,    0,    0,    0,    0,  117,  117,   52,   52, -232,
 -232, -232, -232,  122,  122, -145,  109,   64,   38, -105,
   25,    0,  150,   11,    0,    0,    0,    0,  -25,    0,
    0,  327,  327,  783,    0,    0,  822,    0,  822,    0,
    0,    0,    0,  -47,    0,  327,  293,    0,    0,  327,
    0,  327,    0,    0,
};
final static short yyrindex[] = {                         0,
    0,  -29,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  -38,  -17,    0,    0,
    0,    0,  390,    0,    0,    0,    0,  213,    0,    0,
    0,   35,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  471,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  518,    0,  657,    0,    0,  841, 1081,
 1173,  102, 1361,  920,  -22,  545,   55,  259,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   35,    0,    0,
    0,    0,    3,    7,    0,    0,    0,    0,    0,  356,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  174,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  900,  929, 1088, 1166, 1210,
 1251, 1324, 1350, 1421, 1463, 1496, 1437,  968, 1094, 1506,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   93,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,
};
final static short yygindex[] = {                       252,
   18,    0,    0, 1364,    0,    0,  220, 1473,    0,  -41,
  139,   49,   74,   15,  110,  104,  114,  118,  107,  115,
    0,    6,    0,    0,  121,  176,    0,    0,  758,  266,
  950, -100,    0,  -27,    0,  212,  -85,    0,  328,  303,
    0,    0,  140,    0,  482,  157, -106,    0,    0,    0,
  232,   92,    0,
};
final static int YYTABLESIZE=1779;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         79,
   21,   82,   82,   82,   64,   82,   77,   79,   63,   61,
  128,   62,   64,   21,   77,    2,   63,   61,   56,   62,
   82,   56,   84,   84,   84,   80,   84,   51,  205,  249,
  198,  187,   39,  210,  148,   56,   56,  174,  175,   37,
   56,   84,  108,  108,  108,  168,  106,  106,  106,  147,
   21,   79,    2,   53,  111,   37,   64,    2,   77,  126,
   63,   61,   79,   62,   56,  148,  148,   64,  148,   77,
   56,   63,   61,  200,   62,  244,  201,   80,   88,   57,
  149,  211,  259,  258,  202,  193,  194,  203,   80,   45,
  245,   81,   78,   88,  172,   60,  173,  129,   60,  262,
   78,   56,   56,  254,   54,  147,  198,   55,  212,  138,
  250,  148,   60,   60,   79,  180,  181,   60,  112,   64,
  139,   77,  140,   63,   61,  158,   62,  223,  224,  225,
  158,  141,  158,   60,  158,  158,  107,  158,  142,   49,
   80,   45,   49,  190,   78,   49,  182,   60,  263,   46,
  153,  158,   45,  171,  188,   78,  155,  183,  169,   49,
   49,  184,   46,  170,   49,   46,  185,   50,   58,  109,
  252,  255,  213,  148,  216,   26,  204,   79,  221,   60,
  109,  176,   64,  177,   77,   48,   63,   61,  248,   62,
  230,  231,  232,  233,   49,   49,  246,   26,   59,   26,
  251,  154,   43,   44,   45,  110,  242,   78,  260,   21,
  270,    2,    3,   26,  136,  158,  132,  158,  158,  253,
  226,  227,  148,    3,   82,   49,   49,  109,  120,   65,
   66,   67,   68,  128,   69,   70,    3,   65,   66,   67,
   68,  186,   69,   70,   21,   84,    2,  228,  229,   56,
   56,    5,    6,    7,    8,    9,   10,   11,   12,   13,
   14,   15,   16,   17,  269,  108,   18,   19,   20,  106,
   78,  207,   71,    3,   72,   38,   73,  130,   74,   75,
   76,   65,   66,   67,   68,  236,   69,   70,  119,  234,
  235,  239,   65,   66,   67,   68,  237,   69,   70,   62,
  240,  238,   62,    5,    6,    7,    8,    9,   10,   11,
   12,   13,   14,   15,   16,   17,   62,   62,   18,   19,
   20,  128,  256,  192,   71,  257,   72,   60,   73,   35,
   74,   75,   76,  272,   52,   71,  148,   72,  191,   73,
  247,   74,   75,   76,   65,   66,   67,   68,  130,   69,
   70,   62,    0,    0,    0,  158,  158,  158,  158,   79,
  158,  158,   49,   49,   64,    0,   77,  215,   63,   61,
    0,   62,  219,   49,   49,    0,  120,  150,  151,  152,
  178,  179,    0,   62,    0,   80,  222,   71,    0,   72,
    0,   73,    0,   74,   75,   76,  133,    0,  158,  133,
  158,    0,  158,    0,  158,  158,  158,   65,   66,   67,
   68,    0,   69,   70,    0,    0,    0,    0,    0,   58,
    0,    0,    0,    0,    0,    1,    0,    0,    0,    0,
  120,    0,    3,  120,   10,   11,   12,   13,   14,   15,
   16,   17,  113,    0,   18,   19,   20,    0,  120,   45,
  120,    0,   78,    4,    5,    6,    7,    8,    9,   10,
   11,   12,   13,   14,   15,   16,   17,    3,  130,   18,
   19,   20,    0,    0,    0,    0,  268,    0,    0,    0,
    0,   45,    0,    0,    0,    0,    0,    0,    0,    5,
    6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
   16,   17,    0,    0,   18,   19,   20,    0,   79,    0,
  118,  119,  120,   64,  119,   77,    0,   63,   61,    0,
   62,    0,    0,    0,    0,    0,    0,    0,    0,  119,
    0,  119,    5,    6,    7,    8,    9,   10,   11,   12,
   13,   14,   15,   16,   17,    0,    0,   18,   19,   20,
    0,    0,    0,    0,   20,   20,    0,    0,   20,   20,
   20,   20,   20,    0,   20,    0,    0,    0,  124,    0,
    0,    0,    0,    0,    0,   20,   20,   20,   20,   20,
   20,    0,    0,    0,    0,   58,    0,  189,   58,   65,
   66,   67,   68,  119,   69,   70,    0,    0,    0,    0,
    0,   78,   58,   58,    0,    0,    0,   58,    0,    0,
   20,   20,   79,    0,    0,    0,    0,   64,    0,   77,
    0,   63,   61,    0,   62,    0,    0,    0,    0,    0,
    0,    0,   71,    0,   72,    0,   73,   58,   74,   75,
   76,   20,   20,    5,    6,    7,    8,    9,   10,   11,
   12,   13,   14,   15,   16,   17,    0,    0,   18,   19,
   20,   79,    0,    0,    0,    0,   64,    0,   77,   58,
   63,   61,  189,   62,  120,  120,  120,  120,  120,  120,
  120,  120,  120,  120,  120,  120,  120,  143,    0,  120,
  120,  120,    0,   32,   32,    0,    0,   32,   32,   32,
   32,   32,  129,   32,    0,   78,    0,    0,    0,    0,
    0,    0,    0,    0,   32,   32,   32,    0,   32,   32,
   79,    0,    0,    0,    0,   64,    0,   77,    0,   63,
   61,    0,   62,  264,  265,    0,    0,    0,   65,   66,
   67,   68,    0,   69,   70,    0,   80,  271,    0,   32,
   32,  273,    0,  274,   78,  119,  119,  119,  119,  119,
  119,  119,  119,  119,  119,  119,  119,  119,    0,    0,
  119,  119,  119,    0,    0,    0,   20,   20,   20,   20,
   32,   32,    0,    0,    0,    0,    0,   20,   20,   20,
   20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
   20,    0,   79,    0,    0,    0,    0,   64,  114,   77,
  217,   63,   61,   78,   62,   79,   58,   58,    0,    0,
   64,    0,   77,  266,   63,   61,   79,   62,    0,    0,
    0,   64,    0,  133,  114,   63,   61,    0,   62,    0,
    0,    0,   65,   66,   67,   68,   79,   69,   70,    0,
    0,   64,    0,  135,   79,   63,   61,    0,   62,   64,
    0,   77,    0,   63,   61,    0,   62,    0,    0,  114,
  114,  114,    0,  114,    0,    0,    0,    0,   38,    0,
    0,   38,    0,   38,   38,   38,    0,    0,    0,    0,
  114,   65,   66,   67,   68,   78,   69,   70,   38,   38,
   38,    0,   38,   38,    0,    0,    0,    0,   78,    0,
    0,    0,    0,    0,    0,   32,   32,   32,   32,   78,
    0,    0,    0,    0,    0,    0,   32,   32,   32,   32,
    0,    0,    0,   38,   38,    0,    0,   39,    0,   78,
   39,    0,   39,   39,   39,    0,    0,   78,    0,  114,
   65,   66,   67,   68,    0,   69,   70,   39,   39,   39,
   54,   39,   39,   54,   38,   38,   40,    0,    0,   40,
   36,   40,   40,   40,    0,   42,    0,   54,   54,    0,
    0,    0,   54,    0,    0,    0,   40,   40,   40,    0,
   40,   40,   39,   39,    0,    0,  108,    0,    0,    0,
    0,    0,    0,    0,    0,  108,    0,    0,   57,    0,
    0,   57,   54,   54,    0,    0,    0,    0,    0,    0,
    0,   40,   40,   39,   39,   57,   57,    0,    0,    0,
   57,    0,   65,   66,   67,   68,    0,   69,   70,    0,
    0,    0,    0,   54,   54,   65,   66,   67,   68,    0,
   69,   70,   40,   40,    0,    0,   65,   66,   67,   68,
   57,   69,   70,  156,  195,    0,    0,    0,    0,  199,
    0,    0,    0,    0,    0,    0,   65,   66,   67,   68,
    0,   69,   70,    0,   65,   66,   67,   68,    0,   69,
   70,   57,   57,    0,    0,    0,  214,    0,    0,   38,
   38,   38,   38,    0,    0,    0,    0,    0,    0,    0,
   38,   38,   38,   38,    0,    0,    0,    0,   41,    0,
    0,   41,    0,    0,   41,   42,    0,    0,   42,    0,
    0,   42,    0,    0,   59,    0,    0,   59,   41,   41,
   41,    0,   41,   41,    0,   42,   42,   42,    0,   42,
   42,   59,   59,   45,    0,    0,   59,    0,   39,   39,
   39,   39,    0,    0,    0,    0,    0,    0,    0,   39,
   39,   39,   39,   41,   41,    0,    0,    0,    0,    0,
   42,   42,    0,    0,    0,    0,   59,   40,   40,   40,
   40,   54,   54,  261,    0,    0,    0,    0,   40,   40,
   40,   40,    0,   43,   41,   41,   43,    0,    0,   43,
   44,   42,   42,   44,    0,    0,   44,    0,   59,    0,
    0,    0,    0,   43,   43,   43,    0,   43,   43,    0,
   44,   44,   44,    0,   44,   44,    0,    0,    0,   57,
   57,    0,    0,    0,    0,    0,    0,   45,    0,    0,
   45,    0,    0,   45,    0,    0,    0,    0,   43,   43,
    0,    0,    0,    0,    0,   44,   44,   45,   45,   45,
    0,   45,   45,    0,    0,    0,  157,  158,  159,  160,
  161,  162,  163,  164,  165,  166,    0,    0,   46,   43,
   43,   46,    0,    0,   46,    0,   44,   44,    0,    0,
    0,    0,   45,   45,    0,    0,    0,    0,   46,   46,
   46,    0,   46,   46,    0,    5,    6,    7,    8,    9,
   10,   11,   12,   13,   14,   15,   16,   17,    0,    0,
   18,   19,   20,   45,   45,    0,    0,    0,    0,   41,
   41,   41,   41,   46,   46,    0,   42,   42,   42,   42,
   41,   41,   41,   41,    0,    0,    0,   42,   42,   42,
   42,   48,    0,    0,   48,   59,   59,   48,    0,    0,
    0,    0,    0,    0,   46,   46,    0,    0,    0,    0,
    0,   48,   48,   48,    0,   48,   48,   47,    0,    0,
   47,    0,    0,   47,    0,    0,    0,    0,   52,    0,
    0,   52,    0,    0,   52,    0,    0,   47,   47,   47,
    0,   47,   47,    0,    0,    0,   48,   48,   52,   52,
    0,    0,    0,   52,   43,   43,   43,   43,    0,    0,
    0,   44,   44,   44,   44,   43,   43,   43,   43,  144,
  145,    0,   47,   47,   44,   44,    0,   48,   48,    0,
    0,    0,    0,   52,   52,    0,    0,    0,   50,    0,
    0,   50,    0,    0,   50,    0,    0,    0,   45,   45,
   45,   45,    0,   47,   47,    0,    0,   55,   50,   50,
   55,   45,   45,   50,   52,   52,    0,    0,    0,    0,
    0,    0,    0,    0,   55,   55,  145,  197,  145,   55,
   51,  208,  209,   51,    0,    0,   51,    0,    0,   46,
   46,   46,   46,   50,   50,    0,    0,  220,    0,    0,
   51,   51,   46,   46,    0,   51,  125,    0,    0,   55,
   55,    0,    0,   53,    0,    0,   53,    0,    0,   53,
  134,  136,  137,    0,   50,   50,   61,    0,    0,   61,
  241,    0,    0,   53,   53,   51,   51,    0,   53,  125,
   55,   55,    0,   61,   61,    0,    0,    0,   61,    0,
    0,  243,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   48,   48,   48,   48,   51,   51,   53,   53,
    0,    0,    0,    0,    0,   48,   48,    0,   61,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   47,   47,
   47,   47,    0,    0,    0,    0,    0,  267,    0,   53,
   53,   47,   47,    0,    0,    0,    0,    0,    0,    0,
   61,    0,   52,   52,    0,    0,    0,    0,    0,    0,
    0,  125,  125,  125,  125,  125,  125,  125,  125,  125,
  125,  125,  125,  125,  125,  125,  125,  125,  125,    0,
    0,    0,   10,   11,   12,   13,   14,   15,   16,   17,
  113,    0,   18,   19,   20,    0,    0,    0,    0,    0,
    0,   50,   50,    0,    0,  125,    0,    0,    0,    0,
    0,    0,   50,   50,    0,    5,    6,    7,    8,    9,
   10,   11,   12,   13,   14,   15,   16,   17,   55,   55,
   18,   19,   20,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   51,   51,    0,    0,    0,    0,    0,
    0,  125,    0,    0,   51,   51,   10,   11,   12,   13,
   14,   15,   16,   17,  113,    0,   18,   19,   20,   10,
   11,   12,   13,   14,   15,   16,   17,  113,    0,   18,
   19,   20,    0,    0,    0,    0,    0,   53,   53,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   61,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                         33,
   40,   40,   41,   42,   38,   44,   40,   33,   42,   43,
   40,   45,   38,   40,   40,   42,   42,   43,   41,   45,
   59,   44,   40,   41,   42,   59,   44,  123,  129,   44,
  116,   63,   59,  140,   44,   58,   59,  270,  271,   22,
   63,   59,   40,   41,   42,   87,   40,   41,   42,   77,
   40,   33,   42,   40,   59,   38,   38,   42,   40,   54,
   42,   43,   33,   45,   44,   44,   44,   38,   44,   40,
   93,   42,   43,   41,   45,   44,   44,   59,   44,   59,
   59,   59,   58,   93,   41,  113,  114,   44,   59,  123,
   59,  125,  126,   59,   43,   41,   45,  123,   44,  125,
  126,  124,  125,  210,   91,  133,  192,   41,   41,   40,
  125,   44,   58,   59,   33,  261,  262,   63,  123,   38,
   40,   40,   40,   42,   43,   33,   45,  169,  170,  171,
   38,   59,   40,   42,   42,   43,   45,   45,   59,   38,
   59,  123,   41,  125,  126,   44,   38,   93,  249,   29,
   40,   59,  123,   37,  125,  126,   46,   94,   42,   58,
   59,  124,   42,   47,   63,   45,  272,  263,   61,   49,
   41,  213,   41,   44,  263,    0,   93,   33,  263,  125,
   60,   60,   38,   62,   40,   29,   42,   43,  263,   45,
  176,  177,  178,  179,   93,   94,   59,   22,   42,   24,
   41,   91,   27,   28,  123,   49,  125,  126,   59,   40,
  258,   42,    0,   38,   41,  123,   60,  125,  126,   41,
  172,  173,   44,  263,  263,  124,  125,  107,   53,  263,
  264,  265,  266,  263,  268,  269,  263,  263,  264,  265,
  266,  273,  268,  269,   40,  263,   42,  174,  175,  272,
  273,  285,  286,  287,  288,  289,  290,  291,  292,  293,
  294,  295,  296,  297,  259,  263,  300,  301,  302,  263,
  126,  133,  306,  263,  308,   24,  310,   58,  312,  313,
  314,  263,  264,  265,  266,  182,  268,  269,   41,  180,
  181,  185,  263,  264,  265,  266,  183,  268,  269,   41,
  186,  184,   44,  285,  286,  287,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,   58,   59,  300,  301,
  302,   56,   41,  112,  306,   44,  308,  273,  310,    2,
  312,  313,  314,   41,   32,  306,   44,  308,  107,  310,
  201,  312,  313,  314,  263,  264,  265,  266,  129,  268,
  269,   93,   -1,   -1,   -1,  263,  264,  265,  266,   33,
  268,  269,  261,  262,   38,   -1,   40,  148,   42,   43,
   -1,   45,  153,  272,  273,   -1,  201,  267,  268,  269,
  259,  260,   -1,  125,   -1,   59,  167,  306,   -1,  308,
   -1,  310,   -1,  312,  313,  314,   41,   -1,  306,   44,
  308,   -1,  310,   -1,  312,  313,  314,  263,  264,  265,
  266,   -1,  268,  269,   -1,   -1,   -1,   -1,   -1,   61,
   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,   -1,
   41,   -1,  263,   44,  290,  291,  292,  293,  294,  295,
  296,  297,  298,   -1,  300,  301,  302,   -1,   59,  123,
   61,   -1,  126,  284,  285,  286,  287,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  263,  249,  300,
  301,  302,   -1,   -1,   -1,   -1,  257,   -1,   -1,   -1,
   -1,  123,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  285,
  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,   -1,   -1,  300,  301,  302,   -1,   33,   -1,
  263,   41,  123,   38,   44,   40,   -1,   42,   43,   -1,
   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,
   -1,   61,  285,  286,  287,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,   -1,   -1,  300,  301,  302,
   -1,   -1,   -1,   -1,   37,   38,   -1,   -1,   41,   42,
   43,   44,   45,   -1,   47,   -1,   -1,   -1,   93,   -1,
   -1,   -1,   -1,   -1,   -1,   58,   59,   60,   61,   62,
   63,   -1,   -1,   -1,   -1,   41,   -1,  106,   44,  263,
  264,  265,  266,  123,  268,  269,   -1,   -1,   -1,   -1,
   -1,  126,   58,   59,   -1,   -1,   -1,   63,   -1,   -1,
   93,   94,   33,   -1,   -1,   -1,   -1,   38,   -1,   40,
   -1,   42,   43,   -1,   45,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  306,   -1,  308,   -1,  310,   93,  312,  313,
  314,  124,  125,  285,  286,  287,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,   -1,   -1,  300,  301,
  302,   33,   -1,   -1,   -1,   -1,   38,   -1,   40,  125,
   42,   43,  191,   45,  285,  286,  287,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,   59,   -1,  300,
  301,  302,   -1,   37,   38,   -1,   -1,   41,   42,   43,
   44,   45,  123,   47,   -1,  126,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   58,   59,   60,   -1,   62,   63,
   33,   -1,   -1,   -1,   -1,   38,   -1,   40,   -1,   42,
   43,   -1,   45,  252,  253,   -1,   -1,   -1,  263,  264,
  265,  266,   -1,  268,  269,   -1,   59,  266,   -1,   93,
   94,  270,   -1,  272,  126,  285,  286,  287,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,   -1,   -1,
  300,  301,  302,   -1,   -1,   -1,  259,  260,  261,  262,
  124,  125,   -1,   -1,   -1,   -1,   -1,  270,  271,  272,
  273,  274,  275,  276,  277,  278,  279,  280,  281,  282,
  283,   -1,   33,   -1,   -1,   -1,   -1,   38,   51,   40,
   41,   42,   43,  126,   45,   33,  272,  273,   -1,   -1,
   38,   -1,   40,   41,   42,   43,   33,   45,   -1,   -1,
   -1,   38,   -1,   40,   77,   42,   43,   -1,   45,   -1,
   -1,   -1,  263,  264,  265,  266,   33,  268,  269,   -1,
   -1,   38,   -1,   40,   33,   42,   43,   -1,   45,   38,
   -1,   40,   -1,   42,   43,   -1,   45,   -1,   -1,  112,
  113,  114,   -1,  116,   -1,   -1,   -1,   -1,   38,   -1,
   -1,   41,   -1,   43,   44,   45,   -1,   -1,   -1,   -1,
  133,  263,  264,  265,  266,  126,  268,  269,   58,   59,
   60,   -1,   62,   63,   -1,   -1,   -1,   -1,  126,   -1,
   -1,   -1,   -1,   -1,   -1,  259,  260,  261,  262,  126,
   -1,   -1,   -1,   -1,   -1,   -1,  270,  271,  272,  273,
   -1,   -1,   -1,   93,   94,   -1,   -1,   38,   -1,  126,
   41,   -1,   43,   44,   45,   -1,   -1,  126,   -1,  192,
  263,  264,  265,  266,   -1,  268,  269,   58,   59,   60,
   41,   62,   63,   44,  124,  125,   38,   -1,   -1,   41,
   21,   43,   44,   45,   -1,   26,   -1,   58,   59,   -1,
   -1,   -1,   63,   -1,   -1,   -1,   58,   59,   60,   -1,
   62,   63,   93,   94,   -1,   -1,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   56,   -1,   -1,   41,   -1,
   -1,   44,   93,   94,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   93,   94,  124,  125,   58,   59,   -1,   -1,   -1,
   63,   -1,  263,  264,  265,  266,   -1,  268,  269,   -1,
   -1,   -1,   -1,  124,  125,  263,  264,  265,  266,   -1,
  268,  269,  124,  125,   -1,   -1,  263,  264,  265,  266,
   93,  268,  269,   61,  115,   -1,   -1,   -1,   -1,  120,
   -1,   -1,   -1,   -1,   -1,   -1,  263,  264,  265,  266,
   -1,  268,  269,   -1,  263,  264,  265,  266,   -1,  268,
  269,  124,  125,   -1,   -1,   -1,  147,   -1,   -1,  259,
  260,  261,  262,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  270,  271,  272,  273,   -1,   -1,   -1,   -1,   38,   -1,
   -1,   41,   -1,   -1,   44,   38,   -1,   -1,   41,   -1,
   -1,   44,   -1,   -1,   41,   -1,   -1,   44,   58,   59,
   60,   -1,   62,   63,   -1,   58,   59,   60,   -1,   62,
   63,   58,   59,  123,   -1,   -1,   63,   -1,  259,  260,
  261,  262,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  270,
  271,  272,  273,   93,   94,   -1,   -1,   -1,   -1,   -1,
   93,   94,   -1,   -1,   -1,   -1,   93,  259,  260,  261,
  262,  272,  273,  244,   -1,   -1,   -1,   -1,  270,  271,
  272,  273,   -1,   38,  124,  125,   41,   -1,   -1,   44,
   38,  124,  125,   41,   -1,   -1,   44,   -1,  125,   -1,
   -1,   -1,   -1,   58,   59,   60,   -1,   62,   63,   -1,
   58,   59,   60,   -1,   62,   63,   -1,   -1,   -1,  272,
  273,   -1,   -1,   -1,   -1,   -1,   -1,   38,   -1,   -1,
   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,   93,   94,
   -1,   -1,   -1,   -1,   -1,   93,   94,   58,   59,   60,
   -1,   62,   63,   -1,   -1,   -1,  274,  275,  276,  277,
  278,  279,  280,  281,  282,  283,   -1,   -1,   38,  124,
  125,   41,   -1,   -1,   44,   -1,  124,  125,   -1,   -1,
   -1,   -1,   93,   94,   -1,   -1,   -1,   -1,   58,   59,
   60,   -1,   62,   63,   -1,  285,  286,  287,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,   -1,   -1,
  300,  301,  302,  124,  125,   -1,   -1,   -1,   -1,  259,
  260,  261,  262,   93,   94,   -1,  259,  260,  261,  262,
  270,  271,  272,  273,   -1,   -1,   -1,  270,  271,  272,
  273,   38,   -1,   -1,   41,  272,  273,   44,   -1,   -1,
   -1,   -1,   -1,   -1,  124,  125,   -1,   -1,   -1,   -1,
   -1,   58,   59,   60,   -1,   62,   63,   38,   -1,   -1,
   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,   38,   -1,
   -1,   41,   -1,   -1,   44,   -1,   -1,   58,   59,   60,
   -1,   62,   63,   -1,   -1,   -1,   93,   94,   58,   59,
   -1,   -1,   -1,   63,  259,  260,  261,  262,   -1,   -1,
   -1,  259,  260,  261,  262,  270,  271,  272,  273,   76,
   77,   -1,   93,   94,  272,  273,   -1,  124,  125,   -1,
   -1,   -1,   -1,   93,   94,   -1,   -1,   -1,   38,   -1,
   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,  259,  260,
  261,  262,   -1,  124,  125,   -1,   -1,   41,   58,   59,
   44,  272,  273,   63,  124,  125,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   58,   59,  133,  125,  135,   63,
   38,  138,  139,   41,   -1,   -1,   44,   -1,   -1,  259,
  260,  261,  262,   93,   94,   -1,   -1,  154,   -1,   -1,
   58,   59,  272,  273,   -1,   63,   54,   -1,   -1,   93,
   94,   -1,   -1,   38,   -1,   -1,   41,   -1,   -1,   44,
   68,   69,   70,   -1,  124,  125,   41,   -1,   -1,   44,
  187,   -1,   -1,   58,   59,   93,   94,   -1,   63,   87,
  124,  125,   -1,   58,   59,   -1,   -1,   -1,   63,   -1,
   -1,  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  259,  260,  261,  262,  124,  125,   93,   94,
   -1,   -1,   -1,   -1,   -1,  272,  273,   -1,   93,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  259,  260,
  261,  262,   -1,   -1,   -1,   -1,   -1,  254,   -1,  124,
  125,  272,  273,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  125,   -1,  272,  273,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  169,  170,  171,  172,  173,  174,  175,  176,  177,
  178,  179,  180,  181,  182,  183,  184,  185,  186,   -1,
   -1,   -1,  290,  291,  292,  293,  294,  295,  296,  297,
  298,   -1,  300,  301,  302,   -1,   -1,   -1,   -1,   -1,
   -1,  261,  262,   -1,   -1,  213,   -1,   -1,   -1,   -1,
   -1,   -1,  272,  273,   -1,  285,  286,  287,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  272,  273,
  300,  301,  302,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  261,  262,   -1,   -1,   -1,   -1,   -1,
   -1,  259,   -1,   -1,  272,  273,  290,  291,  292,  293,
  294,  295,  296,  297,  298,   -1,  300,  301,  302,  290,
  291,  292,  293,  294,  295,  296,  297,  298,   -1,  300,
  301,  302,   -1,   -1,   -1,   -1,   -1,  272,  273,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  273,
};
}
final static short YYFINAL=22;
final static short YYMAXTOKEN=314;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,"'!'",null,null,null,"'%'","'&'",null,"'('","')'","'*'","'+'",
"','","'-'","'.'","'/'",null,null,null,null,null,null,null,null,null,null,"':'",
"';'","'<'","'='","'>'","'?'",null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,"'['",null,"']'","'^'",null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,"'{'","'|'","'}'","'~'",null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,"NO_ELSE","ELSE","GE_OP","LE_OP",
"EQ_OP","NE_OP","IDENTIFIER","CONSTANT","STRING_LITERAL","SIZEOF","PTR_OP",
"INC_OP","DEC_OP","LEFT_OP","RIGHT_OP","AND_OP","OR_OP","MUL_ASSIGN",
"DIV_ASSIGN","MOD_ASSIGN","ADD_ASSIGN","SUB_ASSIGN","LEFT_ASSIGN",
"RIGHT_ASSIGN","AND_ASSIGN","XOR_ASSIGN","OR_ASSIGN","DEFINE","TYPEDEF",
"EXTERN","STATIC","AUTO","REGISTER","CHAR","SHORT","INT","LONG","SIGNED",
"UNSIGNED","FLOAT","DOUBLE","CONST","VOLATILE","VOID","STRUCT","UNION","ENUM",
"CASE","DEFAULT","IF","SWITCH","WHILE","DO","FOR","GOTO","CONTINUE","BREAK",
"RETURN",
};
final static String yyrule[] = {
"$accept : begin",
"begin : external_declaration",
"begin : begin external_declaration",
"begin : Define begin",
"begin : error",
"primary_expression : IDENTIFIER",
"primary_expression : CONSTANT",
"primary_expression : STRING_LITERAL",
"primary_expression : '(' expression ')'",
"Define : DEFINE",
"postfix_expression : primary_expression",
"postfix_expression : postfix_expression '[' expression ']'",
"postfix_expression : postfix_expression '(' ')'",
"postfix_expression : postfix_expression '(' argument_expression_list ')'",
"postfix_expression : postfix_expression '.' IDENTIFIER",
"postfix_expression : postfix_expression PTR_OP IDENTIFIER",
"postfix_expression : postfix_expression INC_OP",
"postfix_expression : postfix_expression DEC_OP",
"argument_expression_list : assignment_expression",
"argument_expression_list : argument_expression_list ',' assignment_expression",
"unary_expression : postfix_expression",
"unary_expression : INC_OP unary_expression",
"unary_expression : DEC_OP unary_expression",
"unary_expression : unary_operator cast_expression",
"unary_expression : SIZEOF unary_expression",
"unary_expression : SIZEOF '(' type_name ')'",
"unary_operator : '&'",
"unary_operator : '*'",
"unary_operator : '+'",
"unary_operator : '-'",
"unary_operator : '~'",
"unary_operator : '!'",
"cast_expression : unary_expression",
"cast_expression : '(' type_name ')' cast_expression",
"multiplicative_expression : cast_expression",
"multiplicative_expression : multiplicative_expression '*' cast_expression",
"multiplicative_expression : multiplicative_expression '/' cast_expression",
"multiplicative_expression : multiplicative_expression '%' cast_expression",
"additive_expression : multiplicative_expression",
"additive_expression : additive_expression '+' multiplicative_expression",
"additive_expression : additive_expression '-' multiplicative_expression",
"shift_expression : additive_expression",
"shift_expression : shift_expression LEFT_OP additive_expression",
"shift_expression : shift_expression RIGHT_OP additive_expression",
"relational_expression : shift_expression",
"relational_expression : relational_expression '<' shift_expression",
"relational_expression : relational_expression '>' shift_expression",
"relational_expression : relational_expression LE_OP shift_expression",
"relational_expression : relational_expression GE_OP shift_expression",
"equality_expression : relational_expression",
"equality_expression : equality_expression EQ_OP relational_expression",
"equality_expression : equality_expression NE_OP relational_expression",
"and_expression : equality_expression",
"and_expression : and_expression '&' equality_expression",
"exclusive_or_expression : and_expression",
"exclusive_or_expression : exclusive_or_expression '^' and_expression",
"inclusive_or_expression : exclusive_or_expression",
"inclusive_or_expression : inclusive_or_expression '|' exclusive_or_expression",
"logical_and_expression : inclusive_or_expression",
"logical_and_expression : logical_and_expression AND_OP inclusive_or_expression",
"logical_or_expression : logical_and_expression",
"logical_or_expression : logical_or_expression OR_OP logical_and_expression",
"conditional_expression : logical_or_expression",
"conditional_expression : logical_or_expression '?' expression ':' conditional_expression",
"assignment_expression : conditional_expression",
"assignment_expression : unary_expression assignment_operator assignment_expression",
"assignment_operator : '='",
"assignment_operator : MUL_ASSIGN",
"assignment_operator : DIV_ASSIGN",
"assignment_operator : MOD_ASSIGN",
"assignment_operator : ADD_ASSIGN",
"assignment_operator : SUB_ASSIGN",
"assignment_operator : LEFT_ASSIGN",
"assignment_operator : RIGHT_ASSIGN",
"assignment_operator : AND_ASSIGN",
"assignment_operator : XOR_ASSIGN",
"assignment_operator : OR_ASSIGN",
"expression : assignment_expression",
"expression : expression ',' assignment_expression",
"constant_expression : conditional_expression",
"declaration : declaration_specifiers ';'",
"declaration : declaration_specifiers init_declarator_list ';'",
"declaration_specifiers : storage_class_specifier",
"declaration_specifiers : storage_class_specifier declaration_specifiers",
"declaration_specifiers : type_specifier",
"declaration_specifiers : type_specifier declaration_specifiers",
"init_declarator_list : init_declarator",
"init_declarator_list : init_declarator_list ',' init_declarator",
"init_declarator : declarator",
"init_declarator : declarator '=' initializer",
"storage_class_specifier : TYPEDEF",
"storage_class_specifier : EXTERN",
"storage_class_specifier : STATIC",
"storage_class_specifier : AUTO",
"storage_class_specifier : REGISTER",
"type_specifier : VOID",
"type_specifier : CHAR",
"type_specifier : SHORT",
"type_specifier : INT",
"type_specifier : LONG",
"type_specifier : FLOAT",
"type_specifier : DOUBLE",
"type_specifier : SIGNED",
"type_specifier : UNSIGNED",
"type_specifier : struct_or_union_specifier",
"specifier_qualifier_list : type_specifier specifier_qualifier_list",
"specifier_qualifier_list : type_specifier",
"specifier_qualifier_list : CONST specifier_qualifier_list",
"specifier_qualifier_list : CONST",
"struct_or_union_specifier : struct_or_union IDENTIFIER '{' struct_declaration_list '}' ';'",
"struct_or_union_specifier : struct_or_union '{' struct_declaration_list '}' ';'",
"struct_or_union_specifier : struct_or_union IDENTIFIER ';'",
"struct_or_union : STRUCT",
"struct_or_union : UNION",
"struct_declaration_list : struct_declaration",
"struct_declaration_list : struct_declaration_list struct_declaration",
"struct_declaration : specifier_qualifier_list struct_declarator_list ';'",
"struct_declarator_list : declarator",
"struct_declarator_list : struct_declarator_list ',' declarator",
"declarator : pointer direct_declarator",
"declarator : direct_declarator",
"direct_declarator : IDENTIFIER",
"direct_declarator : '(' declarator ')'",
"direct_declarator : direct_declarator '[' constant_expression ']'",
"direct_declarator : direct_declarator '[' ']'",
"direct_declarator : direct_declarator '(' parameter_list ')'",
"direct_declarator : direct_declarator '(' identifier_list ')'",
"direct_declarator : direct_declarator '(' ')'",
"pointer : '*'",
"pointer : '*' pointer",
"parameter_list : parameter_declaration",
"parameter_list : parameter_list ',' parameter_declaration",
"parameter_declaration : declaration_specifiers declarator",
"parameter_declaration : declaration_specifiers",
"identifier_list : IDENTIFIER",
"identifier_list : identifier_list ',' IDENTIFIER",
"type_name : specifier_qualifier_list",
"type_name : specifier_qualifier_list declarator",
"initializer : assignment_expression",
"initializer : '{' initializer_list '}'",
"initializer : '{' initializer_list ',' '}'",
"initializer_list : initializer",
"initializer_list : initializer_list ',' initializer",
"statement : compound_statement",
"statement : expression_statement",
"statement : selection_statement",
"statement : iteration_statement",
"statement : jump_statement",
"compound_statement : '{' '}'",
"compound_statement : '{' statement_list '}'",
"compound_statement : '{' declaration_list '}'",
"compound_statement : '{' declaration_list statement_list '}'",
"declaration_list : declaration",
"declaration_list : declaration_list declaration",
"statement_list : statement",
"statement_list : statement_list statement",
"expression_statement : ';'",
"expression_statement : expression ';'",
"selection_statement : IF '(' expression ')' statement",
"selection_statement : IF '(' expression ')' statement ELSE statement",
"iteration_statement : WHILE '(' expression ')' statement",
"iteration_statement : FOR '(' expression_statement expression_statement ')' statement",
"iteration_statement : FOR '(' expression_statement expression_statement expression ')' statement",
"jump_statement : CONTINUE ';'",
"jump_statement : BREAK ';'",
"jump_statement : RETURN ';'",
"jump_statement : RETURN expression ';'",
"external_declaration : function_definition",
"external_declaration : declaration",
"function_definition : declaration_specifiers declarator declaration_list compound_statement",
"function_definition : declaration_specifiers declarator compound_statement",
"function_definition : declarator declaration_list compound_statement",
"function_definition : declarator compound_statement",
};

//#line 361 "parser.y"

private Yylex lexer;

private int yylex(){
    int yyl_return = -1;
    try{
        yylval = new ParserVal("");
        yyl_return = lexer.yylex();
        //if(yyl_return == -1)
        //    yyerror("Syntax Error");
    }
    catch (IOException e){
        System.err.println("IO error: "+e);
    }
    return yyl_return;
}

public void yyerror(String error) {
    /* System.err.println("Error: "+ error + " at line " + lexer.yyline); */
    System.out.print("Syntax Error at: ");
    lexer.printToken();
}

public Parser(Reader r){
    lexer = new Yylex(r, this);
}

public static void main(String args[]) throws IOException{

    Parser yyparser;
    if(args.length == 0)
        System.exit(1);

    yyparser = new Parser(new FileReader(args[0]));
    int par = yyparser.yyparse();
	if(par == 0)
        System.out.println("\nParsing Complete and OK!");
    else
        System.out.println("\nParsing Failed!");

    Yylex.display();
}

//#line 911 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
