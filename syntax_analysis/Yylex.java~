/* The following code was generated by JFlex 1.6.1 */

import java.util.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>scanner.l</tt>
 */
public class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int STRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\11\1\16\1\20\1\21\1\17\22\0\1\11\1\44\1\41"+
    "\1\15\1\0\1\47\1\45\1\37\1\75\1\76\1\23\1\14\1\73"+
    "\1\42\1\32\1\22\1\35\11\10\1\74\1\70\1\31\1\43\1\34"+
    "\1\102\1\0\4\12\1\13\1\3\5\1\1\5\10\1\1\7\2\1"+
    "\1\36\2\1\1\77\1\40\1\100\1\50\1\1\1\0\1\51\1\54"+
    "\1\26\1\27\1\30\1\2\1\62\1\33\1\24\1\1\1\56\1\4"+
    "\1\60\1\25\1\53\1\66\1\1\1\55\1\57\1\52\1\6\1\67"+
    "\1\64\1\61\1\65\1\63\1\71\1\46\1\72\1\101\6\0\1\20"+
    "\u1fa2\0\1\20\1\20\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\4\2\1\3\1\4\1\5\1\1\1\6"+
    "\1\7\4\2\1\10\1\11\1\12\1\3\1\1\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\12\2"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\4\1\36\1\37\1\40\1\41"+
    "\4\2\1\3\1\0\1\3\1\42\1\43\1\4\1\44"+
    "\1\45\1\46\1\47\5\2\1\50\3\2\1\51\1\52"+
    "\1\53\1\54\3\0\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\16\2\1\70"+
    "\1\71\1\72\1\2\1\73\3\2\1\3\1\0\1\3"+
    "\1\74\10\2\1\75\1\76\1\3\23\2\1\77\2\2"+
    "\1\100\1\101\4\2\1\102\1\103\1\2\1\104\13\2"+
    "\1\105\1\106\3\2\1\107\1\110\1\111\2\2\1\112"+
    "\4\2\1\113\4\2\1\114\3\2\1\115\4\2\1\116"+
    "\1\117\1\2\1\120\1\2\1\121\1\122\1\123\1\124"+
    "\1\125\3\2\1\126\1\127\2\2\1\130\1\131\1\132"+
    "\1\133";

  private static int [] zzUnpackAction() {
    int [] result = new int[228];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\311\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa"+
    "\0\u03ed\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\u057f\0\311"+
    "\0\u05c2\0\u0605\0\u0648\0\u068b\0\u06ce\0\u0711\0\u0754\0\u0797"+
    "\0\u07da\0\u081d\0\u0860\0\u08a3\0\u08e6\0\u0929\0\u096c\0\u09af"+
    "\0\u09f2\0\311\0\311\0\311\0\311\0\u0a35\0\311\0\311"+
    "\0\311\0\311\0\311\0\311\0\u0a78\0\u0abb\0\311\0\u0afe"+
    "\0\311\0\u0b41\0\u0b84\0\u0bc7\0\u0c0a\0\u0c4d\0\u0c90\0\u0cd3"+
    "\0\311\0\311\0\u029e\0\311\0\311\0\311\0\u010c\0\u0d16"+
    "\0\u0d59\0\u0d9c\0\u0ddf\0\u0e22\0\u0e65\0\u0ea8\0\u0eeb\0\u0f2e"+
    "\0\u0f71\0\311\0\u0fb4\0\311\0\u0ff7\0\u103a\0\u107d\0\311"+
    "\0\311\0\311\0\311\0\311\0\311\0\311\0\311\0\311"+
    "\0\311\0\311\0\u10c0\0\u1103\0\u1146\0\u1189\0\u11cc\0\u120f"+
    "\0\u1252\0\u1295\0\u12d8\0\u131b\0\u135e\0\u13a1\0\u13e4\0\u1427"+
    "\0\311\0\311\0\311\0\u146a\0\u010c\0\u14ad\0\u14f0\0\u1533"+
    "\0\u1576\0\u15b9\0\311\0\u010c\0\u15fc\0\u163f\0\u1682\0\u16c5"+
    "\0\u1708\0\u174b\0\u178e\0\u17d1\0\311\0\311\0\u1814\0\u1857"+
    "\0\u189a\0\u18dd\0\u1920\0\u1963\0\u19a6\0\u19e9\0\u1a2c\0\u1a6f"+
    "\0\u1ab2\0\u1af5\0\u1b38\0\u1b7b\0\u1bbe\0\u1c01\0\u1c44\0\u1c87"+
    "\0\u1cca\0\u1d0d\0\u010c\0\u1d50\0\u1d93\0\u010c\0\u010c\0\u1dd6"+
    "\0\u1e19\0\u1e5c\0\u1e9f\0\u010c\0\u010c\0\u1ee2\0\u010c\0\u1f25"+
    "\0\u1f68\0\u1fab\0\u1fee\0\u2031\0\u2074\0\u20b7\0\u20fa\0\u213d"+
    "\0\u2180\0\u21c3\0\u010c\0\u010c\0\u2206\0\u2249\0\u228c\0\u010c"+
    "\0\u010c\0\u010c\0\u22cf\0\u2312\0\u010c\0\u2355\0\u2398\0\u23db"+
    "\0\u241e\0\u010c\0\u2461\0\u24a4\0\u24e7\0\u252a\0\u010c\0\u256d"+
    "\0\u25b0\0\u25f3\0\u010c\0\u2636\0\u2679\0\u26bc\0\u26ff\0\u010c"+
    "\0\u010c\0\u2742\0\u010c\0\u2785\0\u010c\0\u010c\0\u010c\0\u010c"+
    "\0\u010c\0\u27c8\0\u280b\0\u284e\0\u010c\0\u010c\0\u2891\0\u28d4"+
    "\0\u010c\0\u010c\0\u010c\0\u010c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[228];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\5\1\7\1\5\1\10\1\5"+
    "\1\11\1\12\2\5\1\13\1\14\1\12\2\4\1\12"+
    "\1\15\1\16\1\17\1\5\1\20\1\21\1\22\1\23"+
    "\1\24\1\5\1\25\1\26\1\5\1\27\1\4\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\5\1\42\1\43\1\5\1\44\1\45\1\5"+
    "\1\46\1\5\1\47\1\5\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\17\12\3\0\1\12\1\65\57\12\16\66\1\67"+
    "\1\0\20\66\1\70\1\71\41\66\104\0\10\5\1\0"+
    "\2\5\10\0\5\5\2\0\1\5\1\0\2\5\12\0"+
    "\17\5\14\0\3\5\1\72\4\5\1\0\2\5\10\0"+
    "\5\5\2\0\1\5\1\0\2\5\12\0\2\5\1\73"+
    "\14\5\14\0\10\5\1\0\2\5\10\0\5\5\2\0"+
    "\1\5\1\0\2\5\12\0\2\5\1\74\14\5\14\0"+
    "\10\5\1\0\2\5\10\0\1\5\1\75\3\5\2\0"+
    "\1\5\1\0\2\5\12\0\17\5\17\0\4\76\1\11"+
    "\2\0\1\77\14\0\1\77\1\0\1\100\2\0\1\11"+
    "\61\0\1\101\26\0\1\102\37\0\16\103\4\0\61\103"+
    "\22\0\1\103\1\104\17\0\1\105\102\0\1\106\40\0"+
    "\1\5\1\107\6\5\1\0\2\5\10\0\1\5\1\110"+
    "\3\5\2\0\1\5\1\0\2\5\12\0\17\5\14\0"+
    "\10\5\1\0\2\5\10\0\5\5\2\0\1\111\1\0"+
    "\2\5\12\0\1\112\1\5\1\113\14\5\14\0\10\5"+
    "\1\0\2\5\10\0\4\5\1\114\2\0\1\5\1\0"+
    "\2\5\12\0\2\5\1\115\14\5\14\0\3\5\1\116"+
    "\4\5\1\0\2\5\10\0\1\5\1\117\3\5\2\0"+
    "\1\5\1\0\2\5\12\0\10\5\1\120\6\5\44\0"+
    "\1\121\11\0\1\122\3\0\1\53\24\0\1\61\16\0"+
    "\1\100\24\0\1\100\101\0\1\123\6\0\1\124\43\0"+
    "\4\76\1\11\2\0\1\77\14\0\1\77\1\0\1\100"+
    "\2\0\1\11\1\125\22\0\1\125\21\0\37\126\1\0"+
    "\1\127\42\126\34\0\1\130\5\0\1\131\1\132\102\0"+
    "\1\133\102\0\1\134\102\0\1\135\1\0\1\136\100\0"+
    "\1\137\2\0\1\140\70\0\1\54\6\0\1\141\102\0"+
    "\1\142\40\0\5\5\1\143\2\5\1\0\2\5\10\0"+
    "\5\5\2\0\1\5\1\0\2\5\12\0\17\5\14\0"+
    "\10\5\1\0\2\5\10\0\5\5\2\0\1\5\1\0"+
    "\2\5\12\0\14\5\1\144\2\5\14\0\10\5\1\0"+
    "\2\5\10\0\5\5\2\0\1\5\1\0\2\5\12\0"+
    "\4\5\1\145\12\5\14\0\10\5\1\0\2\5\10\0"+
    "\4\5\1\146\2\0\1\5\1\0\2\5\12\0\17\5"+
    "\14\0\10\5\1\0\2\5\10\0\1\147\1\5\1\150"+
    "\2\5\2\0\1\151\1\0\2\5\12\0\1\5\1\152"+
    "\11\5\1\153\3\5\14\0\10\5\1\0\2\5\10\0"+
    "\5\5\2\0\1\5\1\0\2\5\12\0\1\154\16\5"+
    "\14\0\10\5\1\0\2\5\10\0\5\5\2\0\1\5"+
    "\1\0\2\5\12\0\2\5\1\155\14\5\14\0\10\5"+
    "\1\0\2\5\10\0\5\5\2\0\1\156\1\0\2\5"+
    "\12\0\17\5\14\0\10\5\1\0\2\5\10\0\5\5"+
    "\2\0\1\5\1\0\2\5\12\0\4\5\1\157\12\5"+
    "\14\0\10\5\1\0\2\5\10\0\5\5\2\0\1\5"+
    "\1\0\2\5\12\0\2\5\1\160\14\5\47\0\1\62"+
    "\70\0\1\161\60\0\16\66\2\0\20\66\2\0\41\66"+
    "\41\0\1\162\13\0\1\163\26\0\10\5\1\0\2\5"+
    "\10\0\5\5\2\0\1\5\1\0\2\5\12\0\2\5"+
    "\1\164\14\5\14\0\10\5\1\0\2\5\10\0\5\5"+
    "\2\0\1\5\1\0\2\5\12\0\4\5\1\165\12\5"+
    "\14\0\10\5\1\0\2\5\10\0\1\5\1\166\3\5"+
    "\2\0\1\5\1\0\2\5\12\0\17\5\14\0\10\5"+
    "\1\0\2\5\10\0\1\167\4\5\2\0\1\5\1\0"+
    "\2\5\12\0\6\5\1\170\10\5\17\0\4\76\103\0"+
    "\1\171\3\0\1\172\20\0\1\171\4\0\1\172\42\0"+
    "\4\173\2\0\1\100\2\0\1\77\14\0\1\77\4\0"+
    "\1\100\46\0\10\5\1\0\2\5\10\0\5\5\2\0"+
    "\1\5\1\0\2\5\12\0\1\5\1\174\15\5\14\0"+
    "\10\5\1\0\2\5\10\0\5\5\2\0\1\5\1\0"+
    "\2\5\12\0\1\175\16\5\14\0\10\5\1\0\2\5"+
    "\10\0\5\5\2\0\1\5\1\0\2\5\12\0\6\5"+
    "\1\176\10\5\14\0\10\5\1\0\2\5\10\0\1\5"+
    "\1\177\3\5\2\0\1\5\1\0\2\5\12\0\17\5"+
    "\14\0\1\5\1\200\6\5\1\0\2\5\10\0\5\5"+
    "\2\0\1\5\1\0\2\5\12\0\17\5\14\0\5\5"+
    "\1\201\2\5\1\0\2\5\10\0\5\5\2\0\1\5"+
    "\1\0\2\5\12\0\17\5\14\0\10\5\1\0\2\5"+
    "\10\0\5\5\2\0\1\5\1\0\2\5\12\0\6\5"+
    "\1\202\10\5\14\0\5\5\1\203\2\5\1\0\2\5"+
    "\10\0\5\5\2\0\1\5\1\0\2\5\12\0\17\5"+
    "\14\0\10\5\1\0\2\5\10\0\5\5\2\0\1\5"+
    "\1\0\2\5\12\0\1\5\1\204\15\5\56\0\1\205"+
    "\102\0\1\206\41\0\2\207\4\0\1\207\1\0\2\207"+
    "\12\0\3\207\4\0\1\207\13\0\1\207\2\0\1\207"+
    "\26\0\37\126\1\173\1\127\60\126\4\0\61\126\1\0"+
    "\10\5\1\0\2\5\10\0\5\5\2\0\1\5\1\0"+
    "\2\5\12\0\1\5\1\210\15\5\14\0\10\5\1\0"+
    "\2\5\10\0\5\5\2\0\1\5\1\0\2\5\12\0"+
    "\15\5\1\211\1\5\14\0\10\5\1\0\2\5\10\0"+
    "\4\5\1\212\2\0\1\5\1\0\2\5\12\0\17\5"+
    "\14\0\10\5\1\0\2\5\10\0\5\5\2\0\1\5"+
    "\1\0\2\5\12\0\1\5\1\213\7\5\1\214\5\5"+
    "\14\0\10\5\1\0\2\5\10\0\5\5\2\0\1\5"+
    "\1\0\2\5\12\0\11\5\1\215\1\216\4\5\14\0"+
    "\10\5\1\0\2\5\10\0\5\5\2\0\1\5\1\0"+
    "\2\5\12\0\1\217\16\5\14\0\10\5\1\0\2\5"+
    "\10\0\5\5\2\0\1\5\1\0\2\5\12\0\2\5"+
    "\1\220\14\5\14\0\10\5\1\0\2\5\10\0\5\5"+
    "\2\0\1\5\1\0\2\5\12\0\1\221\3\5\1\222"+
    "\12\5\14\0\10\5\1\0\2\5\10\0\1\223\4\5"+
    "\2\0\1\5\1\0\2\5\12\0\17\5\14\0\10\5"+
    "\1\0\2\5\10\0\1\224\4\5\2\0\1\5\1\0"+
    "\2\5\12\0\17\5\14\0\10\5\1\0\2\5\10\0"+
    "\5\5\2\0\1\5\1\0\2\5\12\0\1\5\1\225"+
    "\15\5\14\0\10\5\1\0\2\5\10\0\1\226\4\5"+
    "\2\0\1\5\1\0\2\5\12\0\17\5\14\0\10\5"+
    "\1\0\2\5\10\0\1\227\4\5\2\0\1\5\1\0"+
    "\2\5\12\0\17\5\14\0\3\5\1\230\4\5\1\0"+
    "\2\5\10\0\1\231\4\5\2\0\1\5\1\0\2\5"+
    "\12\0\17\5\14\0\10\5\1\0\2\5\10\0\5\5"+
    "\2\0\1\5\1\0\2\5\12\0\1\232\16\5\14\0"+
    "\10\5\1\0\2\5\10\0\5\5\2\0\1\5\1\0"+
    "\2\5\12\0\11\5\1\233\5\5\14\0\10\5\1\0"+
    "\2\5\10\0\5\5\2\0\1\5\1\0\2\5\12\0"+
    "\2\5\1\234\14\5\14\0\10\5\1\0\2\5\10\0"+
    "\1\235\4\5\2\0\1\5\1\0\2\5\12\0\17\5"+
    "\15\0\4\173\2\0\1\171\24\0\1\171\55\0\1\171"+
    "\24\0\1\171\46\0\10\5\1\0\2\5\10\0\5\5"+
    "\2\0\1\5\1\0\2\5\12\0\4\5\1\236\12\5"+
    "\14\0\10\5\1\0\2\5\10\0\4\5\1\237\2\0"+
    "\1\5\1\0\2\5\12\0\17\5\14\0\10\5\1\0"+
    "\2\5\10\0\5\5\2\0\1\5\1\0\2\5\12\0"+
    "\1\5\1\240\4\5\1\241\10\5\14\0\10\5\1\0"+
    "\2\5\10\0\5\5\2\0\1\5\1\0\2\5\12\0"+
    "\1\242\16\5\14\0\10\5\1\0\2\5\10\0\5\5"+
    "\2\0\1\5\1\0\2\5\12\0\3\5\1\243\13\5"+
    "\14\0\10\5\1\0\2\5\10\0\4\5\1\244\2\0"+
    "\1\5\1\0\2\5\12\0\17\5\14\0\10\5\1\0"+
    "\2\5\10\0\5\5\2\0\1\5\1\0\2\5\12\0"+
    "\7\5\1\245\7\5\14\0\10\5\1\0\2\5\10\0"+
    "\4\5\1\246\2\0\1\5\1\0\2\5\12\0\17\5"+
    "\15\0\2\207\4\76\1\207\1\0\2\207\12\0\3\207"+
    "\4\0\1\207\13\0\1\207\2\0\1\207\27\0\10\5"+
    "\1\0\2\5\10\0\5\5\2\0\1\5\1\0\2\5"+
    "\12\0\2\5\1\247\14\5\14\0\10\5\1\0\2\5"+
    "\10\0\4\5\1\250\2\0\1\5\1\0\2\5\12\0"+
    "\17\5\14\0\10\5\1\0\2\5\10\0\5\5\2\0"+
    "\1\5\1\0\2\5\12\0\1\251\16\5\14\0\5\5"+
    "\1\252\2\5\1\0\2\5\10\0\5\5\2\0\1\5"+
    "\1\0\2\5\12\0\17\5\14\0\10\5\1\0\2\5"+
    "\10\0\1\253\4\5\2\0\1\5\1\0\2\5\12\0"+
    "\17\5\14\0\10\5\1\0\2\5\10\0\1\5\1\254"+
    "\3\5\2\0\1\5\1\0\2\5\12\0\17\5\14\0"+
    "\10\5\1\0\2\5\10\0\4\5\1\255\2\0\1\5"+
    "\1\0\2\5\12\0\17\5\14\0\10\5\1\0\2\5"+
    "\10\0\1\5\1\256\3\5\2\0\1\5\1\0\2\5"+
    "\12\0\17\5\14\0\10\5\1\0\2\5\10\0\5\5"+
    "\2\0\1\5\1\0\2\5\12\0\4\5\1\257\12\5"+
    "\14\0\10\5\1\0\2\5\10\0\5\5\2\0\1\5"+
    "\1\0\2\5\12\0\1\5\1\260\15\5\14\0\5\5"+
    "\1\261\2\5\1\0\2\5\10\0\5\5\2\0\1\5"+
    "\1\0\2\5\12\0\17\5\14\0\10\5\1\0\2\5"+
    "\10\0\5\5\2\0\1\5\1\0\2\5\12\0\1\5"+
    "\1\262\15\5\14\0\10\5\1\0\2\5\10\0\1\5"+
    "\1\263\3\5\2\0\1\5\1\0\2\5\12\0\17\5"+
    "\14\0\10\5\1\0\2\5\10\0\5\5\2\0\1\5"+
    "\1\0\2\5\12\0\2\5\1\264\14\5\14\0\3\5"+
    "\1\265\4\5\1\0\2\5\10\0\5\5\2\0\1\5"+
    "\1\0\2\5\12\0\17\5\14\0\10\5\1\0\2\5"+
    "\10\0\1\5\1\266\3\5\2\0\1\5\1\0\2\5"+
    "\12\0\17\5\14\0\10\5\1\0\2\5\10\0\5\5"+
    "\2\0\1\5\1\0\2\5\12\0\1\267\16\5\14\0"+
    "\10\5\1\0\2\5\10\0\3\5\1\270\1\5\2\0"+
    "\1\5\1\0\2\5\12\0\17\5\14\0\10\5\1\0"+
    "\2\5\10\0\5\5\2\0\1\5\1\0\2\5\12\0"+
    "\1\5\1\271\15\5\14\0\10\5\1\0\2\5\10\0"+
    "\1\5\1\272\3\5\2\0\1\5\1\0\2\5\12\0"+
    "\17\5\14\0\10\5\1\0\2\5\10\0\5\5\2\0"+
    "\1\5\1\0\2\5\12\0\11\5\1\273\5\5\14\0"+
    "\10\5\1\0\2\5\10\0\1\274\4\5\2\0\1\5"+
    "\1\0\2\5\12\0\17\5\14\0\10\5\1\0\2\5"+
    "\10\0\5\5\2\0\1\5\1\0\2\5\12\0\1\5"+
    "\1\275\15\5\14\0\5\5\1\276\2\5\1\0\2\5"+
    "\10\0\5\5\2\0\1\5\1\0\2\5\12\0\17\5"+
    "\14\0\3\5\1\277\4\5\1\0\2\5\10\0\5\5"+
    "\2\0\1\5\1\0\2\5\12\0\17\5\14\0\10\5"+
    "\1\0\2\5\10\0\5\5\2\0\1\5\1\0\2\5"+
    "\12\0\4\5\1\300\12\5\14\0\10\5\1\0\2\5"+
    "\10\0\3\5\1\301\1\5\2\0\1\5\1\0\2\5"+
    "\12\0\17\5\14\0\10\5\1\0\2\5\10\0\5\5"+
    "\2\0\1\5\1\0\2\5\12\0\5\5\1\302\11\5"+
    "\14\0\10\5\1\0\2\5\10\0\5\5\2\0\1\5"+
    "\1\0\2\5\12\0\4\5\1\303\12\5\14\0\10\5"+
    "\1\0\2\5\10\0\5\5\2\0\1\5\1\0\2\5"+
    "\12\0\6\5\1\304\10\5\14\0\10\5\1\0\2\5"+
    "\10\0\4\5\1\305\2\0\1\5\1\0\2\5\12\0"+
    "\17\5\14\0\10\5\1\0\2\5\10\0\5\5\2\0"+
    "\1\5\1\0\2\5\12\0\2\5\1\306\14\5\14\0"+
    "\1\5\1\263\6\5\1\0\2\5\10\0\5\5\2\0"+
    "\1\5\1\0\2\5\12\0\17\5\14\0\10\5\1\0"+
    "\2\5\10\0\5\5\2\0\1\5\1\0\2\5\12\0"+
    "\1\5\1\307\15\5\14\0\10\5\1\0\2\5\10\0"+
    "\1\310\4\5\2\0\1\5\1\0\2\5\12\0\17\5"+
    "\14\0\10\5\1\0\2\5\10\0\2\5\1\311\2\5"+
    "\2\0\1\5\1\0\2\5\12\0\17\5\14\0\10\5"+
    "\1\0\2\5\10\0\2\5\1\312\2\5\2\0\1\5"+
    "\1\0\2\5\12\0\17\5\14\0\10\5\1\0\2\5"+
    "\10\0\4\5\1\313\2\0\1\5\1\0\2\5\12\0"+
    "\17\5\14\0\10\5\1\0\2\5\10\0\5\5\2\0"+
    "\1\5\1\0\2\5\12\0\1\5\1\256\15\5\14\0"+
    "\10\5\1\0\2\5\10\0\5\5\2\0\1\5\1\0"+
    "\2\5\12\0\1\5\1\314\15\5\14\0\10\5\1\0"+
    "\2\5\10\0\1\5\1\315\3\5\2\0\1\5\1\0"+
    "\2\5\12\0\17\5\14\0\10\5\1\0\2\5\10\0"+
    "\1\5\1\316\3\5\2\0\1\5\1\0\2\5\12\0"+
    "\17\5\14\0\3\5\1\317\4\5\1\0\2\5\10\0"+
    "\5\5\2\0\1\5\1\0\2\5\12\0\17\5\14\0"+
    "\10\5\1\0\2\5\10\0\4\5\1\320\2\0\1\5"+
    "\1\0\2\5\12\0\17\5\14\0\10\5\1\0\2\5"+
    "\10\0\1\5\1\321\3\5\2\0\1\5\1\0\2\5"+
    "\12\0\17\5\14\0\10\5\1\0\2\5\10\0\4\5"+
    "\1\322\2\0\1\5\1\0\2\5\12\0\17\5\14\0"+
    "\10\5\1\0\2\5\10\0\1\5\1\323\3\5\2\0"+
    "\1\5\1\0\2\5\12\0\17\5\14\0\10\5\1\0"+
    "\2\5\10\0\5\5\2\0\1\5\1\0\2\5\12\0"+
    "\1\5\1\324\15\5\14\0\10\5\1\0\2\5\10\0"+
    "\3\5\1\325\1\5\2\0\1\5\1\0\2\5\12\0"+
    "\17\5\14\0\1\5\1\326\6\5\1\0\2\5\10\0"+
    "\5\5\2\0\1\5\1\0\2\5\12\0\17\5\14\0"+
    "\10\5\1\0\2\5\10\0\2\5\1\327\2\5\2\0"+
    "\1\5\1\0\2\5\12\0\17\5\14\0\10\5\1\0"+
    "\2\5\10\0\5\5\2\0\1\5\1\0\2\5\12\0"+
    "\1\5\1\330\15\5\14\0\10\5\1\0\2\5\10\0"+
    "\5\5\2\0\1\331\1\0\2\5\12\0\17\5\14\0"+
    "\10\5\1\0\2\5\10\0\1\332\4\5\2\0\1\5"+
    "\1\0\2\5\12\0\17\5\14\0\10\5\1\0\2\5"+
    "\10\0\4\5\1\333\2\0\1\5\1\0\2\5\12\0"+
    "\17\5\14\0\5\5\1\334\2\5\1\0\2\5\10\0"+
    "\5\5\2\0\1\5\1\0\2\5\12\0\17\5\14\0"+
    "\10\5\1\0\2\5\10\0\5\5\2\0\1\5\1\0"+
    "\2\5\12\0\1\5\1\335\15\5\14\0\1\5\1\336"+
    "\6\5\1\0\2\5\10\0\5\5\2\0\1\5\1\0"+
    "\2\5\12\0\17\5\14\0\10\5\1\0\2\5\10\0"+
    "\4\5\1\337\2\0\1\5\1\0\2\5\12\0\17\5"+
    "\14\0\3\5\1\340\4\5\1\0\2\5\10\0\5\5"+
    "\2\0\1\5\1\0\2\5\12\0\17\5\14\0\10\5"+
    "\1\0\2\5\10\0\3\5\1\341\1\5\2\0\1\5"+
    "\1\0\2\5\12\0\17\5\14\0\10\5\1\0\2\5"+
    "\10\0\4\5\1\342\2\0\1\5\1\0\2\5\12\0"+
    "\17\5\14\0\10\5\1\0\2\5\10\0\5\5\2\0"+
    "\1\5\1\0\2\5\12\0\4\5\1\343\12\5\14\0"+
    "\10\5\1\0\2\5\10\0\4\5\1\344\2\0\1\5"+
    "\1\0\2\5\12\0\17\5\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10519];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\5\1\1\11\15\1\1\11\21\1\4\11"+
    "\1\1\6\11\2\1\1\11\1\1\1\11\5\1\1\0"+
    "\1\1\2\11\1\1\3\11\13\1\1\11\1\1\1\11"+
    "\3\0\13\11\16\1\3\11\6\1\1\0\1\11\11\1"+
    "\2\11\136\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[228];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private Parser yyparser;
    public Yylex(java.io.Reader r, Parser yyparser){
        this(r);
        this.yyparser = yyparser;
    }
	public void printToken(){
		System.out.println(" line: " + yyline + "\ttoken: " + yytext());
	}

    public boolean isPresent(String type, String token){
        for( int i = 0; i < count; i++ ){
            if( symbolTable[i].type.equals(type) && symbolTable[i].token.equals(token) ){
                return true;
            }
        }
        return false;
    }

    public void insertTokenUnique(String type, String token){
        if( !isPresent(type, token) ){
            symbolTable[count] = new node(yyline, type, token);
            count++;
        }
    }

    public static void display() {
        for( int i = 0; i < count; i++ ) {
            System.out.println(" line: " + symbolTable[i].lineno + "\ttype: " + symbolTable[i].type + "\ttoken: " + symbolTable[i].token );
        }
    }

    static class node{
        public int lineno;
        public String type;
        public String token;
        node(int lineno, String type, String token){
            this.lineno = lineno;
            this.type = type;
            this.token = token;
        }
    }

    static node[] symbolTable = new node[1024];
    static int count = 0;
    String datatype = "";

    public static StringBuffer string = new StringBuffer();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 200) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     return 0;
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return -1;
            }
          case 92: break;
          case 2: 
            { if( datatype == "" )
                                return Parser.IDENTIFIER;
                            else
                            {
                                insertTokenUnique(datatype, yytext());
                                return Parser.IDENTIFIER;
                            }
            }
          case 93: break;
          case 3: 
            { return Parser.CONSTANT;
            }
          case 94: break;
          case 4: 
            { 
            }
          case 95: break;
          case 5: 
            { return('+');
            }
          case 96: break;
          case 6: 
            { return('/');
            }
          case 97: break;
          case 7: 
            { return('*');
            }
          case 98: break;
          case 8: 
            { return('<');
            }
          case 99: break;
          case 9: 
            { return('.');
            }
          case 100: break;
          case 10: 
            { return('>');
            }
          case 101: break;
          case 11: 
            { string.setLength(0); yybegin(STRING);
            }
          case 102: break;
          case 12: 
            { return('-');
            }
          case 103: break;
          case 13: 
            { return('=');
            }
          case 104: break;
          case 14: 
            { return('!');
            }
          case 105: break;
          case 15: 
            { return('&');
            }
          case 106: break;
          case 16: 
            { return('|');
            }
          case 107: break;
          case 17: 
            { return('%');
            }
          case 108: break;
          case 18: 
            { return('^');
            }
          case 109: break;
          case 19: 
            { datatype=""; return(';');
            }
          case 110: break;
          case 20: 
            { return('{');
            }
          case 111: break;
          case 21: 
            { return('}');
            }
          case 112: break;
          case 22: 
            { return(',');
            }
          case 113: break;
          case 23: 
            { return(':');
            }
          case 114: break;
          case 24: 
            { return('(');
            }
          case 115: break;
          case 25: 
            { return(')');
            }
          case 116: break;
          case 26: 
            { return('[');
            }
          case 117: break;
          case 27: 
            { return(']');
            }
          case 118: break;
          case 28: 
            { return('~');
            }
          case 119: break;
          case 29: 
            { return('?');
            }
          case 120: break;
          case 30: 
            { string.append( yytext());
            }
          case 121: break;
          case 31: 
            { string.append('\n');
            }
          case 122: break;
          case 32: 
            { string.append('\\');
            }
          case 123: break;
          case 33: 
            { yybegin(YYINITIAL);
                        insertTokenUnique("STRING", string.toString() );
                        return Parser.STRING_LITERAL;
            }
          case 124: break;
          case 34: 
            { return Parser.INC_OP;
            }
          case 125: break;
          case 35: 
            { return Parser.ADD_ASSIGN;
            }
          case 126: break;
          case 36: 
            { yybegin(COMMENT);
            }
          case 127: break;
          case 37: 
            { return Parser.DIV_ASSIGN;
            }
          case 128: break;
          case 38: 
            { return Parser.MUL_ASSIGN;
            }
          case 129: break;
          case 39: 
            { return Parser.IF;
            }
          case 130: break;
          case 40: 
            { return Parser.DO;
            }
          case 131: break;
          case 41: 
            { return Parser.LEFT_OP;
            }
          case 132: break;
          case 42: 
            { return Parser.LE_OP;
            }
          case 133: break;
          case 43: 
            { return Parser.RIGHT_OP;
            }
          case 134: break;
          case 44: 
            { return Parser.GE_OP;
            }
          case 135: break;
          case 45: 
            { return Parser.PTR_OP;
            }
          case 136: break;
          case 46: 
            { return Parser.DEC_OP;
            }
          case 137: break;
          case 47: 
            { return Parser.SUB_ASSIGN;
            }
          case 138: break;
          case 48: 
            { return Parser.EQ_OP;
            }
          case 139: break;
          case 49: 
            { return Parser.NE_OP;
            }
          case 140: break;
          case 50: 
            { return Parser.AND_ASSIGN;
            }
          case 141: break;
          case 51: 
            { return Parser.AND_OP;
            }
          case 142: break;
          case 52: 
            { return Parser.OR_ASSIGN;
            }
          case 143: break;
          case 53: 
            { return Parser.OR_OP;
            }
          case 144: break;
          case 54: 
            { return Parser.MOD_ASSIGN;
            }
          case 145: break;
          case 55: 
            { return Parser.XOR_ASSIGN;
            }
          case 146: break;
          case 56: 
            { yybegin(YYINITIAL);
            }
          case 147: break;
          case 57: 
            { string.append('\"');
            }
          case 148: break;
          case 58: 
            { string.append('\r');
            }
          case 149: break;
          case 59: 
            { return Parser.FOR;
            }
          case 150: break;
          case 60: 
            { datatype="INT"; return Parser.INT;
            }
          case 151: break;
          case 61: 
            { return Parser.LEFT_ASSIGN;
            }
          case 152: break;
          case 62: 
            { return Parser.RIGHT_ASSIGN;
            }
          case 153: break;
          case 63: 
            { return Parser.LONG;
            }
          case 154: break;
          case 64: 
            { return Parser.CHAR;
            }
          case 155: break;
          case 65: 
            { return Parser.CASE;
            }
          case 156: break;
          case 66: 
            { return Parser.ELSE;
            }
          case 157: break;
          case 67: 
            { return Parser.ENUM;
            }
          case 158: break;
          case 68: 
            { return Parser.AUTO;
            }
          case 159: break;
          case 69: 
            { insertTokenUnique("FUNCTION", yytext()); return Parser.IDENTIFIER;
            }
          case 160: break;
          case 70: 
            { return Parser.GOTO;
            }
          case 161: break;
          case 71: 
            { return Parser.VOID;
            }
          case 162: break;
          case 72: 
            { datatype="FLOAT"; return Parser.FLOAT;
            }
          case 163: break;
          case 73: 
            { return Parser.UNION;
            }
          case 164: break;
          case 74: 
            { return Parser.CONST;
            }
          case 165: break;
          case 75: 
            { return Parser.BREAK;
            }
          case 166: break;
          case 76: 
            { return Parser.SHORT;
            }
          case 167: break;
          case 77: 
            { return Parser.WHILE;
            }
          case 168: break;
          case 78: 
            { return Parser.DOUBLE;
            }
          case 169: break;
          case 79: 
            { return Parser.EXTERN;
            }
          case 170: break;
          case 80: 
            { return Parser.RETURN;
            }
          case 171: break;
          case 81: 
            { return Parser.SIGNED;
            }
          case 172: break;
          case 82: 
            { return Parser.SIZEOF;
            }
          case 173: break;
          case 83: 
            { return Parser.STATIC;
            }
          case 174: break;
          case 84: 
            { return Parser.STRUCT;
            }
          case 175: break;
          case 85: 
            { return Parser.SWITCH;
            }
          case 176: break;
          case 86: 
            { return Parser.DEFAULT;
            }
          case 177: break;
          case 87: 
            { return Parser.TYPEDEF;
            }
          case 178: break;
          case 88: 
            { return Parser.UNSIGNED;
            }
          case 179: break;
          case 89: 
            { return Parser.CONTINUE;
            }
          case 180: break;
          case 90: 
            { return Parser.REGISTER;
            }
          case 181: break;
          case 91: 
            { return Parser.VOLATILE;
            }
          case 182: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
